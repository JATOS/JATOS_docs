"use strict";(self.webpackChunkjatos_docs=self.webpackChunkjatos_docs||[]).push([[8396],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var i=n.createContext({}),p=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(a),d=o,h=u["".concat(i,".").concat(d)]||u[d]||m[d]||s;return a?n.createElement(h,r(r({ref:t},c),{},{components:a})):n.createElement(h,r({ref:t},c))}));function d(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=a.length,r=new Array(s);r[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var p=2;p<s;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},34381:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var n=a(83117),o=(a(67294),a(3905));const s={title:"jatos.js Reference",slug:"/jatos.js-Reference.html"},r=void 0,l={unversionedId:"Reference/jatos.js-Reference",id:"version-3.7.1/Reference/jatos.js-Reference",title:"jatos.js Reference",description:"Introduction",source:"@site/versioned_docs/version-3.7.1/Reference/jatos.js-Reference.md",sourceDirName:"Reference",slug:"/jatos.js-Reference.html",permalink:"/3.7.x/jatos.js-Reference.html",draft:!1,editUrl:"https://github.com/JATOS/JATOS_docs/tree/main/versioned_docs/version-3.7.1/Reference/jatos.js-Reference.md",tags:[],version:"3.7.1",lastUpdatedBy:"elisafilevich",lastUpdatedAt:1741856262,formattedLastUpdatedAt:"Mar 13, 2025",frontMatter:{title:"jatos.js Reference",slug:"/jatos.js-Reference.html"},sidebar:"tutorialSidebar",previous:{title:"Customize JATOS' Home Page",permalink:"/3.7.x/Customize-JATOS-Home-Page.html"}},i={},p=[{value:"Introduction",id:"introduction",level:2},{value:"ID variables",id:"id-variables",level:2},{value:"<code>jatos.studyId</code>",id:"jatosstudyid",level:3},{value:"<code>jatos.componentId</code>",id:"jatoscomponentid",level:3},{value:"<code>jatos.batchId</code>",id:"jatosbatchid",level:3},{value:"<code>jatos.workerId</code>",id:"jatosworkerid",level:3},{value:"<code>jatos.studyCode</code>",id:"jatosstudycode",level:3},{value:"<code>jatos.studyResultId</code>",id:"jatosstudyresultid",level:3},{value:"<code>jatos.componentResultId</code>",id:"jatoscomponentresultid",level:3},{value:"<code>jatos.groupMemberId</code>",id:"jatosgroupmemberid",level:3},{value:"<code>jatos.groupResultId</code>",id:"jatosgroupresultid",level:3},{value:"Study variables",id:"study-variables",level:2},{value:"<code>jatos.studyProperties</code>",id:"jatosstudyproperties",level:3},{value:"<code>jatos.studyJsonInput</code>",id:"jatosstudyjsoninput",level:3},{value:"<code>jatos.studyLength</code>",id:"jatosstudylength",level:3},{value:"Component variables",id:"component-variables",level:2},{value:"<code>jatos.componentProperties</code>",id:"jatoscomponentproperties",level:3},{value:"<code>jatos.componentJsonInput</code>",id:"jatoscomponentjsoninput",level:3},{value:"<code>jatos.componentList</code>",id:"jatoscomponentlist",level:3},{value:"<code>jatos.componentPos</code>",id:"jatoscomponentpos",level:3},{value:"Other variables",id:"other-variables",level:2},{value:"<code>jatos.version</code>",id:"jatosversion",level:3},{value:"<code>jatos.urlQueryParameters</code>",id:"jatosurlqueryparameters",level:3},{value:"<code>jatos.studySessionData</code>",id:"jatosstudysessiondata",level:3},{value:"<code>jatos.channelSendingTimeoutTime</code>",id:"jatoschannelsendingtimeouttime",level:3},{value:"<code>jatos.channelHeartbeatInterval</code>",id:"jatoschannelheartbeatinterval",level:3},{value:"<code>jatos.channelHeartbeatTimeoutTime</code>",id:"jatoschannelheartbeattimeouttime",level:3},{value:"<code>jatos.channelClosedCheckInterval</code>",id:"jatoschannelclosedcheckinterval",level:3},{value:"<code>jatos.channelOpeningBackoffTimeMin</code>",id:"jatoschannelopeningbackofftimemin",level:3},{value:"<code>jatos.channelOpeningBackoffTimeMax</code>",id:"jatoschannelopeningbackofftimemax",level:3},{value:"<code>jatos.httpTimeout</code>",id:"jatoshttptimeout",level:3},{value:"<code>jatos.httpRetry</code>",id:"jatoshttpretry",level:3},{value:"<code>jatos.httpRetryWait</code>",id:"jatoshttpretrywait",level:3},{value:"<code>jatos.waitSendDataOverlayConfig</code>",id:"jatoswaitsenddataoverlayconfig",level:3},{value:"General <em>jatos.js</em> functions",id:"general-jatosjs-functions",level:2},{value:"<code>jatos.onLoad</code>",id:"jatosonload",level:3},{value:"<code>jatos.addAbortButton</code>",id:"jatosaddabortbutton",level:3},{value:"<code>jatos.showBeforeUnloadWarning</code>",id:"jatosshowbeforeunloadwarning",level:3},{value:"<code>jatos.showOverlay</code>",id:"jatosshowoverlay",level:3},{value:"<code>jatos.removeOverlay</code>",id:"jatosremoveoverlay",level:3},{value:"<code>jatos.onError</code>",id:"jatosonerror",level:3},{value:"<code>jatos.log</code>",id:"jatoslog",level:3},{value:"<code>jatos.catchAndLogErrors</code>",id:"jatoscatchandlogerrors",level:3},{value:"<code>jatos.addJatosIds</code>",id:"jatosaddjatosids",level:3},{value:"<code>jatos.setHeartbeatPeriod</code>",id:"jatossetheartbeatperiod",level:3},{value:"<code>jatos.setStudySessionData</code>",id:"jatossetstudysessiondata",level:3},{value:"Functions to control study flow",id:"functions-to-control-study-flow",level:2},{value:"<code>jatos.startComponent</code>",id:"jatosstartcomponent",level:3},{value:"<code>jatos.startComponentByPos</code>",id:"jatosstartcomponentbypos",level:3},{value:"<code>jatos.startComponentByTitle</code>",id:"jatosstartcomponentbytitle",level:3},{value:"<code>jatos.startNextComponent</code>",id:"jatosstartnextcomponent",level:3},{value:"<code>jatos.startLastComponent</code>",id:"jatosstartlastcomponent",level:3},{value:"<code>jatos.abortStudy</code>",id:"jatosabortstudy",level:3},{value:"<code>jatos.abortStudyAjax</code>",id:"jatosabortstudyajax",level:3},{value:"<code>jatos.endStudy</code>",id:"jatosendstudy",level:3},{value:"<code>jatos.endStudyAndRedirect</code>",id:"jatosendstudyandredirect",level:3},{value:"<code>jatos.endStudyAjax</code>",id:"jatosendstudyajax",level:3},{value:"Result data and result upload/download files",id:"result-data-and-result-uploaddownload-files",level:2},{value:"<code>jatos.submitResultData</code>",id:"jatossubmitresultdata",level:3},{value:"<code>jatos.appendResultData</code>",id:"jatosappendresultdata",level:3},{value:"<code>jatos.uploadResultFile</code>",id:"jatosuploadresultfile",level:3},{value:"<code>jatos.downloadResultFile</code>",id:"jatosdownloadresultfile",level:3},{value:"Batch variables",id:"batch-variables",level:2},{value:"<code>jatos.batchProperties</code>",id:"jatosbatchproperties",level:3},{value:"<code>jatos.batchJsonInput</code>",id:"jatosbatchjsoninput",level:3},{value:"Batch Session functions",id:"batch-session-functions",level:2},{value:"<code>jatos.onBatchSession</code>",id:"jatosonbatchsession",level:3},{value:"<code>jatos.batchSession.get</code>",id:"jatosbatchsessionget",level:3},{value:"<code>jatos.batchSession.set</code>",id:"jatosbatchsessionset",level:3},{value:"<code>jatos.batchSession.getAll</code>",id:"jatosbatchsessiongetall",level:3},{value:"<code>jatos.batchSession.setAll</code>",id:"jatosbatchsessionsetall",level:3},{value:"<code>jatos.batchSession.clear</code>",id:"jatosbatchsessionclear",level:3},{value:"<code>jatos.batchSession.find</code>",id:"jatosbatchsessionfind",level:3},{value:"<code>jatos.batchSession.defined</code>",id:"jatosbatchsessiondefined",level:3},{value:"<code>jatos.batchSession.test</code>",id:"jatosbatchsessiontest",level:3},{value:"<code>jatos.batchSession.add</code>",id:"jatosbatchsessionadd",level:3},{value:"<code>jatos.batchSession.remove</code>",id:"jatosbatchsessionremove",level:3},{value:"<code>jatos.batchSession.replace</code>",id:"jatosbatchsessionreplace",level:3},{value:"<code>jatos.batchSession.copy</code>",id:"jatosbatchsessioncopy",level:3},{value:"<code>jatos.batchSession.move</code>",id:"jatosbatchsessionmove",level:3},{value:"<code>jatos.batchSessionVersioning</code>",id:"jatosbatchsessionversioning",level:3},{value:"Group variables",id:"group-variables",level:2},{value:"<code>jatos.groupMemberId</code>",id:"jatosgroupmemberid-1",level:3},{value:"<code>jatos.groupResultId</code>",id:"jatosgroupresultid-1",level:3},{value:"<code>jatos.groupMembers</code>",id:"jatosgroupmembers",level:3},{value:"<code>jatos.groupChannels</code>",id:"jatosgroupchannels",level:3},{value:"Group functions",id:"group-functions",level:2},{value:"<code>jatos.joinGroup</code>",id:"jatosjoingroup",level:3},{value:"<code>jatos.sendGroupMsg</code>",id:"jatossendgroupmsg",level:3},{value:"<code>jatos.sendGroupMsgTo</code>",id:"jatossendgroupmsgto",level:3},{value:"<code>jatos.leaveGroup</code>",id:"jatosleavegroup",level:3},{value:"<code>jatos.reassignGroup</code>",id:"jatosreassigngroup",level:3},{value:"<code>jatos.setGroupFixed</code>",id:"jatossetgroupfixed",level:3},{value:"<code>jatos.hasJoinedGroup</code>",id:"jatoshasjoinedgroup",level:3},{value:"<code>jatos.hasOpenGroupChannel</code>",id:"jatoshasopengroupchannel",level:3},{value:"<code>jatos.isMaxActiveMemberReached</code>",id:"jatosismaxactivememberreached",level:3},{value:"<code>jatos.isMaxActiveMemberOpen</code>",id:"jatosismaxactivememberopen",level:3},{value:"<code>jatos.isGroupOpen</code>",id:"jatosisgroupopen",level:3},{value:"Functions to access the Group Session",id:"functions-to-access-the-group-session",level:2},{value:"<code>jatos.groupSession.get</code>",id:"jatosgroupsessionget",level:3},{value:"<code>jatos.groupSession.set</code>",id:"jatosgroupsessionset",level:3},{value:"<code>jatos.groupSession.getAll</code>",id:"jatosgroupsessiongetall",level:3},{value:"<code>jatos.groupSession.setAll</code>",id:"jatosgroupsessionsetall",level:3},{value:"<code>jatos.groupSession.clear</code>",id:"jatosgroupsessionclear",level:3},{value:"<code>jatos.groupSession.find</code>",id:"jatosgroupsessionfind",level:3},{value:"<code>jatos.groupSession.defined</code>",id:"jatosgroupsessiondefined",level:3},{value:"<code>jatos.groupSession.test</code>",id:"jatosgroupsessiontest",level:3},{value:"<code>jatos.groupSession.add</code>",id:"jatosgroupsessionadd",level:3},{value:"<code>jatos.groupSession.remove</code>",id:"jatosgroupsessionremove",level:3},{value:"<code>jatos.groupSession.replace</code>",id:"jatosgroupsessionreplace",level:3},{value:"<code>jatos.groupSession.copy</code>",id:"jatosgroupsessioncopy",level:3},{value:"<code>jatos.groupSession.move</code>",id:"jatosgroupsessionmove",level:3},{value:"<code>jatos.groupSessionVersioning</code>",id:"jatosgroupsessionversioning",level:3}],c={toc:p};function m(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"jatos.js")," is a JavaScript library that helps you to communicate from your component's JavaScript with your JATOS server. Below we list and describe its variables and functions."),(0,o.kt)("p",null,"Always load ",(0,o.kt)("em",{parentName:"p"},"jatos.js")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"<head>")," section with the following line:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'<script src="jatos.js"><\/script>\n')),(0,o.kt)("p",null,"All ",(0,o.kt)("em",{parentName:"p"},"jatos.js")," variables or functions start with ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos."),". For example, if you want to get the study's ID you use ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.studyId"),". "),(0,o.kt)("p",null,"Most ",(0,o.kt)("em",{parentName:"p"},"jatos.js")," variables or functions only work after ",(0,o.kt)("em",{parentName:"p"},"jatos.js")," is initialized (",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.onLoad()")," is used)."),(0,o.kt)("p",null,"And, please, if you find a mistake or have a question don't hesitate to ",(0,o.kt)("a",{parentName:"p",href:"Contact-us.html"},"contact us"),"."),(0,o.kt)("h2",{id:"id-variables"},"ID variables"),(0,o.kt)("p",null,"All those IDs are generated and stored by JATOS. ",(0,o.kt)("em",{parentName:"p"},"jatos.js")," automatically sets these variables with the corresponding values if you included the ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.onLoad()")," callback function at the beginning of your JavaScript."),(0,o.kt)("p",null,"There's a convenient function that adds most of these IDs to a given object. See function ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.addJatosIds(obj)")," below."),(0,o.kt)("h3",{id:"jatosstudyid"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.studyId")),(0,o.kt)("p",null,"ID of the study which is currently running. All the study properties are associated with this ID."),(0,o.kt)("h3",{id:"jatoscomponentid"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.componentId")),(0,o.kt)("p",null,"ID of the component which is currently running. All the component properties are associated with this ID."),(0,o.kt)("h3",{id:"jatosbatchid"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.batchId")),(0,o.kt)("p",null,"ID of the batch this study run belongs to. All batch properties are associated with this ID."),(0,o.kt)("h3",{id:"jatosworkerid"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.workerId")),(0,o.kt)("p",null,"Each worker who is running a study has an ID."),(0,o.kt)("h3",{id:"jatosstudycode"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.studyCode")),(0,o.kt)("p",null,"The study code that was used to start this study run."),(0,o.kt)("h3",{id:"jatosstudyresultid"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.studyResultId")),(0,o.kt)("p",null,"This ID is individual for every study run. A study result contains data belonging to the run in general (e.g. Study Session)."),(0,o.kt)("h3",{id:"jatoscomponentresultid"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.componentResultId")),(0,o.kt)("p",null,"This ID is individual for every component in a study run. A component result contains data of the run belonging to the specific component (e.g. result data)."),(0,o.kt)("h3",{id:"jatosgroupmemberid"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.groupMemberId")),(0,o.kt)("p",null,"see ",(0,o.kt)("a",{parentName:"p",href:"#group-variables"},"Group Variables")),(0,o.kt)("h3",{id:"jatosgroupresultid"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.groupResultId")),(0,o.kt)("p",null,"see ",(0,o.kt)("a",{parentName:"p",href:"#group-variables"},"Group Variables")),(0,o.kt)("h2",{id:"study-variables"},"Study variables"),(0,o.kt)("h3",{id:"jatosstudyproperties"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.studyProperties")),(0,o.kt)("p",null,"All the properties (except the JSON input data) you entered for this study"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"jatos.studyProperties.title")," - Study's title"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"jatos.studyProperties.uuid")," - Study's UUID"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"jatos.studyProperties.description")," - Study's description"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"jatos.studyProperties.descriptionHash")," - Hash of study's description"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"jatos.studyProperties.locked")," - Whether the study is locked or not"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"jatos.studyProperties.dirName")," - Study's dir name in the file system of your JATOS installation"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"jatos.studyProperties.groupStudy")," - Whether this is a group study or not")),(0,o.kt)("h3",{id:"jatosstudyjsoninput"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.studyJsonInput")),(0,o.kt)("p",null,"The JSON input you entered in the study's properties. This is ",(0,o.kt)("inlineCode",{parentName:"p"},"{}")," if the field was left empty."),(0,o.kt)("h3",{id:"jatosstudylength"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.studyLength")),(0,o.kt)("p",null,"Number of component this study has"),(0,o.kt)("h2",{id:"component-variables"},"Component variables"),(0,o.kt)("h3",{id:"jatoscomponentproperties"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.componentProperties")),(0,o.kt)("p",null,"All the properties (except the JSON input data) you entered for this component"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"jatos.componentProperties.title")," - Component's title"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"jatos.componentProperties.uuid")," - Component's UUID"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"jatos.componentProperties.htmlFilePath")," - Path to Component's HTML file in your JATOS installation"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"jatos.componentProperties.reloadable")," - Whether it's reloadable")),(0,o.kt)("h3",{id:"jatoscomponentjsoninput"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.componentJsonInput")),(0,o.kt)("p",null,"The JSON input you entered in the component's properties. This is ",(0,o.kt)("inlineCode",{parentName:"p"},"{}")," if the field was left empty."),(0,o.kt)("h3",{id:"jatoscomponentlist"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.componentList")),(0,o.kt)("p",null,"An array of all components of this study with basic information about each component. For each component it has the ",(0,o.kt)("inlineCode",{parentName:"p"},"title"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"id"),", whether it is ",(0,o.kt)("inlineCode",{parentName:"p"},"active"),", and whether it is ",(0,o.kt)("inlineCode",{parentName:"p"},"reloadable"),"."),(0,o.kt)("h3",{id:"jatoscomponentpos"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.componentPos")),(0,o.kt)("p",null,"Position of this component within the study starting with 1 (like shown in the GUI)"),(0,o.kt)("h2",{id:"other-variables"},"Other variables"),(0,o.kt)("h3",{id:"jatosversion"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.version")),(0,o.kt)("p",null,"Current version of the ",(0,o.kt)("em",{parentName:"p"},"jatos.js")," library"),(0,o.kt)("h3",{id:"jatosurlqueryparameters"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.urlQueryParameters")),(0,o.kt)("p",null,"Original query string parameters of the URL that starts the study. It is provided as a JavaScript object; the value is ",(0,o.kt)("inlineCode",{parentName:"p"},"{}")," if no query string parameters are present. This might be useful to pass on information from outside of JATOS into a study run, e.g. if you want to pass on information like gender and age. However if you know the information beforehand it's easier to put them in the Study's or Component's JSON input. Another example is MTurk which passes on it's worker's ID via a URL query parameter."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"One has this link to start a Personal Single Run:"),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:9000/publix/50/start?batchId=47&personalSingleWorkerId=506")),(0,o.kt)("p",{parentName:"li"},"Now one could add parameters to the URL's query string to pass on external information into the study run. E.g. the following URL would add the parameters 'foo' with the value 'bar' and 'a' with the value '123':"),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:9000/publix/50/start?batchId=47&personalSingleWorkerId=506&foo=bar&a=123")),(0,o.kt)("p",{parentName:"li"},"Then those parameter will be accessible during the study run as ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.urlQueryParameters.a")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.urlQueryParameters.foo"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"MTurk uses for its worker ID the URL query parameter 'workerId' and this is accessible via ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.urlQueryParameters.workerId"),"."))),(0,o.kt)("h3",{id:"jatosstudysessiondata"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.studySessionData")),(0,o.kt)("p",null,"The session data variable can be accessed and modified by every component of a study. It's a very convenient way to share data between different components. Whatever is written in this variable will be available in the subsequent components. However, remember that the session data will be deleted after the study is finished (see also ",(0,o.kt)("a",{parentName:"p",href:"Session-Data-Three-Types.html"},"Session Data - Three Types"),")."),(0,o.kt)("h3",{id:"jatoschannelsendingtimeouttime"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.channelSendingTimeoutTime")),(0,o.kt)("p",null,"Time in ms to wait for an answer after sending a message via a channel (batch or group). Set this variable if you want to change the default value (default is 10 s)."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.channelSendingTimeoutTime = 20000; // Sets channel timeout to 20 seconds\n")),(0,o.kt)("h3",{id:"jatoschannelheartbeatinterval"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.channelHeartbeatInterval")),(0,o.kt)("p",null,"Waiting time in ms between channel (group or batch) heartbeats (default is 25 s)"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.channelHeartbeatInterval = 10000; // Sets interval to 10 seconds\n")),(0,o.kt)("h3",{id:"jatoschannelheartbeattimeouttime"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.channelHeartbeatTimeoutTime")),(0,o.kt)("p",null,"Waiting time in ms for JATOS server's answer to a channel heartbeat (default is 10 s)"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.channelHeartbeatTimeoutTime = 20000; // Sets interval to 20 seconds\n")),(0,o.kt)("h3",{id:"jatoschannelclosedcheckinterval"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.channelClosedCheckInterval")),(0,o.kt)("p",null,"Waiting time in ms between checking if channels (group or batch) are closed unexpectedly (default is 2 s)"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.channelClosedCheckInterval = 4000; // Sets interval to 4 seconds\n")),(0,o.kt)("h3",{id:"jatoschannelopeningbackofftimemin"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.channelOpeningBackoffTimeMin")),(0,o.kt)("p",null,"Min waiting time (in ms) between channel reopening attempts (default is 1s for min and 2 min for max). ",(0,o.kt)("em",{parentName:"p"},"jatos.js")," uses an ",(0,o.kt)("em",{parentName:"p"},"exponential back-off")," retry pattern for the channels."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.channelOpeningBackoffTimeMin = 2000; // Sets interval to 2 seconds\n")),(0,o.kt)("h3",{id:"jatoschannelopeningbackofftimemax"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.channelOpeningBackoffTimeMax")),(0,o.kt)("p",null,"Max waiting time (in ms) between channel reopening attempts (default is 1s for min and 2 min for max). ",(0,o.kt)("em",{parentName:"p"},"jatos.js")," uses an ",(0,o.kt)("em",{parentName:"p"},"exponential back-off")," retry pattern for the channels."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.channelOpeningBackoffTimeMax = 60000; // Sets interval to 1 minute\n")),(0,o.kt)("h3",{id:"jatoshttptimeout"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.httpTimeout")),(0,o.kt)("p",null,"Time in ms to wait for an answer of an HTTP request by ",(0,o.kt)("em",{parentName:"p"},"jatos.js"),". Set this variable if you want to change the default value (default is 1 min)."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.httpTimeout = 30000; // Sets HTTP timeout to 30 seconds\n")),(0,o.kt)("h3",{id:"jatoshttpretry"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.httpRetry")),(0,o.kt)("p",null,"Some jatos functions (e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.sendResultData"),") send an Ajax request to the JATOS server. If this request was not successful (e.g. network problems) ",(0,o.kt)("em",{parentName:"p"},"jatos.js")," retries it. With this variable one can change the number of retries. The default is 5."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.httpRetry = 2; // Attempts 2 retries of failed Ajax requests\n")),(0,o.kt)("h3",{id:"jatoshttpretrywait"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.httpRetryWait")),(0,o.kt)("p",null,"Same as ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.httpRetry")," but this variable defines the waiting time between the retries. The default is 1000 ms."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.httpRetryWait = 5000; // Sets Ajax retry waiting time to 5 seconds\n")),(0,o.kt)("h3",{id:"jatoswaitsenddataoverlayconfig"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.waitSendDataOverlayConfig")),(0,o.kt)("p",null,'Config of the overlay that is shown when the component ended but there are still data to be sent. See function jatos.showOverlay for config options. By default the text is "Sending data. Please wait." with an image of a spinning wheel.'),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.waitSendDataOverlayConfig = { text: "Enviando datos. Espere." };\n')),(0,o.kt)("h2",{id:"general-jatosjs-functions"},"General ",(0,o.kt)("em",{parentName:"h2"},"jatos.js")," functions"),(0,o.kt)("h3",{id:"jatosonload"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.onLoad")),(0,o.kt)("p",null,"Defines callback function that ",(0,o.kt)("em",{parentName:"p"},"jatos.js")," will call when it's finished initialising."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {function} callback")," - function to be called after ",(0,o.kt)("em",{parentName:"li"},"jatos.js"),"' initialization is done")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.onLoad(function() {\n  // Start here with your code that uses jatos.js' variables and functions\n});\n")),(0,o.kt)("h3",{id:"jatosaddabortbutton"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.addAbortButton")),(0,o.kt)("p",null,"Adds a button to the document that if pressed calls ",(0,o.kt)("em",{parentName:"p"},"jatos.abortStudy")," (which cancels the study run and deletes all result data and files). By default this button is in the bottom-right corner but this and other properties can be configured."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {object optional} config")," - Config object",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string optional} text")," - Button text (Default: 'Cancel')"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {boolean optional} confirm")," - Should the worker be asked for confirmation? (Default: true)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string optional} confirmText")," - Confirmation text (Default: 'Do you really want to cancel this study?')"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string optional} tooltip")," - Tooltip text (Default: 'Cancels this study and deletes all already submitted data')"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string optional} msg")," - Message to be send back to JATOS to be logged (Default: 'Worker decided to abort')"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string optional} style")," - Additional CSS styles"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {function optional} action")," - Which function should be called in the end. Default is jatos.abortStudy.")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Adds the default cancel button"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.addAbortButton()\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Adds a cancel button and changes some properties"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.addAbortButton({\n  text: "Quit",\n  confirmText: "You really wanne quit?",\n  tooltip: "Don\'t you dare clicking here!",\n  msg: "This worker aborted the mission.",\n  style: "color:green"\n});\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Adds a cancel button and changes the position to the bottom-left"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.addAbortButton({\n  style: "left:1em"\n});\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Adds a cancel button and calls 'myFunction' if pressed"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.addAbortButton({\n  action: myFunction\n});\n")))),(0,o.kt)("h3",{id:"jatosshowbeforeunloadwarning"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.showBeforeUnloadWarning")),(0,o.kt)("p",null,"Convenience function that adds or cancels a warning popup that will be shown by the browser to the worker who attempts to reload the page or close the browser (tab). By default this is turned on for components that are not 'reloadable'. Modern browsers do not allow to change the message of this popup. This works only if at least one user action happend in the window, e.g. mouse click (",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event"},"https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event"),")."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {boolean} show")," - If true the warning will be shown - if false a\tpreviously added warning will be canceled")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("p",null,"Adds a warning popup:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.showBeforeUnloadWarning(true);\n")),(0,o.kt)("h3",{id:"jatosshowoverlay"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.showOverlay")),(0,o.kt)("p",null,"Convenience function that shows a text and an image in the center of the screen. By default the text is 'Please wait.' and the image is an spinning wheel."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {object optional} config")," - Config object",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string optional} text"),' - Text to be shown. Default is "Please wait".'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string optional} imgUrl")," - URL of the image. Default is a spinning wheel."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string optional} showImg")," - If true the image is shown - otherwise not. Default is true."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string optional} style")," - Additional CSS styles")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Shows the default overlay with 'Please wait.' and an spinning wheel."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.showOverlay()\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Shows text only"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.showOverlay({\n  text: "Please have a coffee break for 5 minutes",\n  showImg: false\n});\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Shows text only"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.showOverlay({\n  text: "Please have a coffee break for 5 minutes",\n  imgUrl: "http://url-to-my-coffee-picture",\n  style: "color:brown"\n});\n')))),(0,o.kt)("h3",{id:"jatosremoveoverlay"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.removeOverlay")),(0,o.kt)("p",null,"Removes an overlay that was added by jatos.showOverlay."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.removeOverlay()\n")),(0,o.kt)("h3",{id:"jatosonerror"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.onError")),(0,o.kt)("p",null,"DEPRECATED - use the specific function's error callback or Promise function instead"),(0,o.kt)("p",null,"Defines a callback function that is to be called in case ",(0,o.kt)("em",{parentName:"p"},"jatos.js")," produces an error."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {function} callback")," - Function to be called in case of an error")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("p",null,"Show the error message in an alert box:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.onError(alert);\n")),(0,o.kt)("h3",{id:"jatoslog"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.log")),(0,o.kt)("p",null,"Sends a message to be logged back to the JATOS server where it will be logged in JATOS' log file."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} logMsg")," - The messages to be logged")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.log("Log this message in JATOS\' log file");\n')),(0,o.kt)("h3",{id:"jatoscatchandlogerrors"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.catchAndLogErrors")),(0,o.kt)("p",null,"Convenience function that sends all 'error' and 'unhandledrejection' events and 'console.error' and 'console.warn' calls to ",(0,o.kt)("a",{parentName:"p",href:"Troubleshooting.html#read-log-file-in-the-browser"},"JATOS' server log"),". This is useful in debugging."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.catchAndLogErrors();\n")),(0,o.kt)("h3",{id:"jatosaddjatosids"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.addJatosIds")),(0,o.kt)("p",null,"Convenience function that adds some ",(0,o.kt)("a",{parentName:"p",href:"jatos.js-Reference.html#ids"},"IDs")," (study code, study ID, study title, batch ID, batch title, component ID, component position, component title, worker ID, study result ID, component result ID, group result ID, group member ID) to the given object."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {object} obj")," - Object to which the IDs will be added")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"var resultData = {};\njatos.addJatosIds(resultData);\n")),(0,o.kt)("h3",{id:"jatossetheartbeatperiod"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.setHeartbeatPeriod")),(0,o.kt)("p",null,"Every running component sends regularly a HTTP request (the heartbeat) back to the JATOS server. This signals that it is still running. As soon as the browser tab running the component is closed the heartbeat ceases. The time of the last heartbeat is visible in the GUI, in the study results page in the 'Last Seen' row. This way you can easily see if a worker is still running your study or if (and when) he abandonend it. By default the heartbeat period is 2 minutes. By careful not to set the period too low (few seconds or even milliseconds) since it might overload your network or your JATOS server."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {number} heartbeatPeriod")," - Time period between two heartbeats in milliseconds")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.setHeartbeatPeriod(60000); // Sets to a heartbeat every minute\n")),(0,o.kt)("h3",{id:"jatossetstudysessiondata"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.setStudySessionData")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"If you want to just write into the study session, this function is not what you need.")," If you want to write something into the study session, just write into the ",(0,o.kt)("a",{parentName:"p",href:"jatos.js-Reference.html#studys-session-data"},(0,o.kt)("inlineCode",{parentName:"a"},"jatos.studySessionData"))," object."),(0,o.kt)("p",null,"Posts Study Session data to the JATOS server. This function sets the study session data and ",(0,o.kt)("strong",{parentName:"p"},"sends it to the JATOS server for safe storage"),". This is done automatically whenever a component finishes. But sometimes it is necessary to trigger this manually, e.g. in a very long-running component one might want to store the session intermediately. It offers callbacks, either as parameters or via a ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),", to signal success or failure in the transfer."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {object} sessionData")," - object to be submitted"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onSuccess")," - Function to be called after this function is finished"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onFail")," - Function to be called after if this this functions fails"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var studySessionData = { "a": 123, "b": 789, "c": 100};\njatos.setStudySessionData(studySessionData);\n')),(0,o.kt)("h2",{id:"functions-to-control-study-flow"},"Functions to control study flow"),(0,o.kt)("h3",{id:"jatosstartcomponent"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.startComponent")),(0,o.kt)("p",null,"Finishes the currently running component and starts the component with the given ID or UUID. Though often it's better to use ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.startComponentByPos")," instead because it keeps working even after an export/import of the study into another JATOS. One can additionally send result data back to the JATOS server."),(0,o.kt)("p",null,"There are two versions: with or without message"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Without message:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {number} componentIdOrUuid")," - ID or UUID of the component to start"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional object} resultData")," - String or object that will be sent as result data. An object will be serialized to JSON (stringify)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onError")," - Callback function if fail"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"With message:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {number} componentIdOrUuid")," - ID or UUID of the component to start"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional object} resultData")," - String or object that will be sent as result data. An object will be serialized to JSON (stringify)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional string} message")," - Message that should be logged (max 255 chars)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onError")," - Callback function if fail")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Jump to component with ID 23"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.startComponent(23);\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Jump to component by using its UUID"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.startComponent("3d277289-754b-4fd6-aa76-c8404deda02e");\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Send result data and jump to another component"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var resultData = "my important result data";\njatos.startComponent(23, resultData);\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Send result data, jump to another component and send a message back that will be visible in JATOS result pages and log"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var resultData = "my important result data";\njatos.startComponent(23, resultData, "everything okay");\n')))),(0,o.kt)("h3",{id:"jatosstartcomponentbypos"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.startComponentByPos")),(0,o.kt)("p",null,"Finishes the currently running component and starts the component with the given position. The component position is the count of the component within the study like shown in the study overview page (1st component has position 1, 2nd component position 2, ...). One can additionally send result data back to the JATOS server."),(0,o.kt)("p",null,"There are two versions: with or without message"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Without message"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {number} componentPos")," - Position of the component to start"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional object} resultData")," - String or object that will be sent as result data. An object will be serialized to JSON (stringify)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onError")," - Callback function if fail"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"With message"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {number} componentPos")," - Position of the component to start"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional object or string} resultData")," - String or object that will be sent as result data. An object will be serialized to JSON (stringify)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional string} message")," - Message that should be logged (max 255 chars)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onError")," - Callback function if fail")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Jump to component in position 3"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.startComponentByPos(3);\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Send result data and jump to component with position 3"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var resultData = "my important result data";\njatos.startComponentByPos(3, resultData);\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Send result data, jump to component in position 3 and send a message back that will be visible in JATOS result pages and log"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var resultData = "my important result data";\njatos.startComponentByPos(3, resultData, "everything okay");\n')))),(0,o.kt)("h3",{id:"jatosstartcomponentbytitle"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.startComponentByTitle")),(0,o.kt)("p",null,"(Needs JATOS version >= 3.7.5) - Finishes the currently running component and starts the component with the given title. If there is more than one component with this title it starts the first. One can additionally send result data back to the JATOS server."),(0,o.kt)("p",null,"There are two versions: with or without message"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Without message"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"_@param {string} title - Title of the component to start"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional object} resultData")," - String or object that will be sent as result data. An object will be serialized to JSON (stringify). "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onError")," - Callback function if fail"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"With message"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"_@param {string} title - Title of the component to start"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional object or string} resultData")," - String or object that will be sent as result data. An object will be serialized to JSON (stringify). "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional string} message")," - Message that should be logged (max 255 chars)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onError")," - Callback function if fail")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},'Jump to component with title "Some title"'),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.startComponentByTitle("Some title");\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},'Send result data and jump to component with title "Some title"'),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var resultData = "my important result data";\njatos.startComponentByTitle("Some title", resultData);\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},'Send result data, jump to component with title "Some title" and send a message back that will be visible in JATOS result pages and log '),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var resultData = "my important result data";\njatos.startComponentByTitle("Some title", resultData, "everything okay");\n')))),(0,o.kt)("h3",{id:"jatosstartnextcomponent"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.startNextComponent")),(0,o.kt)("p",null,"Finishes the currently running component and starts the next component of this study. The next component is the one with position + 1. The component position is the count of the component within the study like shown in the study overview page (1st component has position 1, 2nd component position 2, ...). One can additionally send result data back to the JATOS server."),(0,o.kt)("p",null,"There are two versions: with or without message"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Without message"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional object} resultData")," - String or object that will be sent as result data. An object will be serialized to JSON (stringify)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onError")," - Callback function if fail"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"With message"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional object or string} resultData")," - String or object that will be sent as result data. An object will be serialized to JSON (stringify)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional string} message")," - Message that should be logged (max 255 chars)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onError")," - Callback function if fail")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Jump to the next component"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.startNextComponent();\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Send result data and jump to the next component"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var resultData = "my important result data";\njatos.startNextComponent(resultData);\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Send result data, jump to the next component and send a message back that will be visible in JATOS result pages and log"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var resultData = "my important result data";\njatos.startNextComponent(resultData, "everything okay");\n')))),(0,o.kt)("h3",{id:"jatosstartlastcomponent"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.startLastComponent")),(0,o.kt)("p",null,"Finishes the current component and starts the last component of this study. If the last component is inactive it starts the component with the highest position that is active. The component position is the count of the component within the study like shown in the study overview page (1st component has position 1, 2nd component position 2, ...). One can additionally send result data back to the JATOS server."),(0,o.kt)("p",null,"There are two versions: with or without message"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Without message"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional object} resultData")," - String or object that will be sent as result data. An object will be serialized to JSON (stringify)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onError")," - Callback function if fail"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"With message"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional object or string} resultData")," - String or object that will be sent as result data. An object will be serialized to JSON (stringify)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional string} message")," - Message that should be logged (max 255 chars)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onError")," - Callback function if fail")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Jump to the last component"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.startLastComponent();\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Send result data and jump to the last component"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var resultData = "my important result data";\njatos.startLastComponent(resultData);\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Send result data, jump to the last component and send a message back that will be visible in JATOS result pages and log"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var resultData = "my important result data";\njatos.startLastComponent(resultData, "everything okay");\n')))),(0,o.kt)("h3",{id:"jatosabortstudy"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.abortStudy")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Hint"),": There is a convenience function ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.addAbortButton")," that already adds a button to your document including showing an confirmation box and options to change it to your needs."),(0,o.kt)("p",null,"Aborts study. All previously submitted result data will be deleted. Afterwards the worker is redirected to the study end page. Data stored in the Batch Session or Group Session are unaffected by this."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional string} message")," - Message that will be stored together with the study results and is accessible via JATOS' GUI result pages. The message can be max 255 characters long."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional boolean} showEndPage")," - If 'true' an end page is shown - if 'false' it\tbehaves like ",(0,o.kt)("inlineCode",{parentName:"li"},"jatos.endStudyAjax"),", which means no showing of JATOS' end page")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Just abort study"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.abortStudy();\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Additionally send a message"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.abortStudy("participant aborted by pressing abort button");\n')))),(0,o.kt)("h3",{id:"jatosabortstudyajax"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.abortStudyAjax")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Hint"),": There is a convenience function ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.addAbortButton")," that already adds a button to your document including showing an confirmation box and options to change it to your needs."),(0,o.kt)("p",null,"Aborts study with an Ajax call. All previously submitted result data will be deleted. Data stored in the Batch Session or Group Session are unaffected by this. It offers callbacks, either as parameter or via a ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),", to signal success or failure in the ending."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional string} message")," - Message that should be logged"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onSuccess")," - Function to be called in case of successful submit"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onError")," - Function to be called in case of error"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Just abort study"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.abortStudyAjax();\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Abort study with a message that will be sent back to JATOS and shown in the result page and put in the log"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.abortStudyAjax("Worker clicked Abort button");\n')))),(0,o.kt)("h3",{id:"jatosendstudy"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.endStudy")),(0,o.kt)("p",null,"Ends study. Redirects the worker to study's end page afterwards."),(0,o.kt)("p",null,"There are two versions: with and without result data"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"With result data"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional string or object} resultData")," - Result data to be sent back to the JATOS server"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional boolean} successful")," - 'true' if study should finish successfully, 'false' otherwise. Default is true"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional string} message")," - Message that will be stored together with the study results and is accessible via JATOS' GUI result pages. The message can be max 255 characters long"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional boolean} showEndPage")," - If 'true' an end page is shown - if 'false' it\tbehaves like ",(0,o.kt)("inlineCode",{parentName:"li"},"jatos.endStudyAjax"),", which means no showing of JATOS' end page"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Without result data"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional boolean} successful")," - 'true' if study should finish successfully, 'false' otherwise. Default is true"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional string} message")," - Message that will be stored together with the study results and is accessible via JATOS' GUI result pages. The message can be max 255 characters long"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional boolean} showEndPage")," - If 'true' an end page is shown - if 'false' it\tbehaves like ",(0,o.kt)("inlineCode",{parentName:"li"},"jatos.endStudyAjax"),", which means no showing of JATOS' end page")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Just end study"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.endStudy();\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"End study and send a message back that will be visible in JATOS result pages and log"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.endStudy(true, "everything worked fine");\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Indicate a failure - leads to study result state FAIL"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.endStudy(false, "internal JS error");\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Send result data and end study"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var resultData = {id: 123, data: "my important result data"};\njatos.endStudy(resultData);\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Send result data, end study and send a message back that will be visible in JATOS result pages and log"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var resultData = {id: 123, data: "my important result data"};\njatos.endStudy(resultData, true, "everything worked fine");\n')))),(0,o.kt)("h3",{id:"jatosendstudyandredirect"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.endStudyAndRedirect")),(0,o.kt)("p",null,"Ends study and redirects the given URL. This is useful if you want to let the worker return to a recruitment platform (e.g. Prolific) or have your own end page. The same effect can be achieved with the Study Properties' ",(0,o.kt)("em",{parentName:"p"},"End Redirect URL")," field. It offers callbacks, either as parameter or via a ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),", to signal success or failure in the ending."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Hint"),": There is a '",(0,o.kt)("strong",{parentName:"p"},"End Redirect URL"),"'  field in the Study Properties that also specifies the redirect URL. It's easier to use, but not as flexible."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} url")," - URL of the page to be redirected to after the study run was successfully finished"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional boolean} successful")," - 'true' if study should finish successful - 'false' otherwise."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional string} message")," - Message that will be stored together with the study results and is accessible via JATOS' GUI result pages. The message can be max 255 characters long."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onSuccess")," - Function to be called in case of successful submit"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onError")," - Function to be called in case of error"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"End study and redirect afterwards"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.endStudyAndRedirect("https://app.prolific.co/submissions/complete?cc=1234ABCD");\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"End study and redirect afterwards. Send result data."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var resultData = {id: 123, data: "my important result data"};\njatos.endStudyAndRedirect("https://app.prolific.co/submissions/complete?cc=1234ABCD", resultData);\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"End study and redirect afterwards. A message will be sent back to JATOS and shown in the result page and put in the log."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.endStudyAndRedirect("https://app.prolific.co/submissions/complete?cc=1234ABCD", true, "everything worked fine");\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"End study and indicate a failure and send a message. Does not redirect."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.endStudyAndRedirect("https://app.prolific.co/submissions/complete?cc=1234ABCD", false, "internal JS error");\n')))),(0,o.kt)("h3",{id:"jatosendstudyajax"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.endStudyAjax")),(0,o.kt)("p",null,"Ends study with an Ajax call - afterwards the study is not redirected to the JATOS' end page. If the study was run by an MTurk worker the confirmation code will be in the response. It offers callbacks, either as parameter or via a ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),", to signal success or failure in the ending."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional boolean} successful")," - 'true' if study should finish successful - 'false' otherwise."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional string} message")," - Message that will be stored together with the study results and is accessible via JATOS' GUI result pages. The message can be max 255 characters long."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onSuccess")," - Function to be called in case of successful submit"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onError")," - Function to be called in case of error"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Just end study"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.endStudyAjax();\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"End study with a message that will be sent back to JATOS and shown in the result page and put in the log"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.endStudyAjax(true, "everything worked fine");\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Indicate a failure and send a message"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.endStudyAjax(false, "some error description");\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"End study and show the confirmation code to the MTurk worker"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.endStudyAjax().then((confirmationCode) => {\n  // Show the confirmation code to the worker\n});\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use Promise to submit result data and afterwards, end the study and move to another URL (",(0,o.kt)("a",{parentName:"p",href:"jatos.js-Reference.html#jatosendstudyandredirect"},"see also"),")"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var resultData = {id: 123, data: "my important result data"};\njatos.submitResultData(resultData)\n  .then(jatos.endStudyAjax)\n  .then(() => { window.location.href = \'http://example.com/index.html\' })\n  .catch(() => console.log("Something went wrong"));\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Send result data and end study"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var resultData = {id: 123, data: "my important result data"};\njatos.endStudyAjax(resultData);\n')))),(0,o.kt)("h2",{id:"result-data-and-result-uploaddownload-files"},"Result data and result upload/download files"),(0,o.kt)("h3",{id:"jatossubmitresultdata"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.submitResultData")),(0,o.kt)("p",null,"Posts result data for the currently running component back to the JATOS server. Already stored result data for this component will be ",(0,o.kt)("strong",{parentName:"p"},"overwritten"),". If you want to append result data use ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.appendResultData")," instead. Alternatively you can send result data with functions that jump to another component (e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.startComponent"),") or end the study (",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.endStudy"),"). It offers callbacks, either as parameter or via a ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),", to signal success or failure in the transfer."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {object} resultData")," - String or object that will be sent as result data. An object will be serialized to JSON."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onSuccess")," - Function to be called in case of successful submit"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onError")," - Function to be called in case of error"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Send result data back to the JATOS server"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var resultData = {"a": 123, "b": 789, "c": 100};\njatos.submitResultData(resultData);\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"It's often used together with ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.startNextComponent")," to first submit result data back to the JATOS server and afterwards jump to the next component"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var resultData = {"a": 123, "b": 789, "c": 100};\njatos.submitResultData(resultData, jatos.startNextComponent);\n')))),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Or together with ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.startComponentByPos")," to start a particular component (here at position 4)"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var resultData = {"a": 123, "b": 789, "c": 100};\njatos.submitResultData(resultData, () => { jatos.startComponentByPos(4) });\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Or by using the returned Promise"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var resultData = {"a": 123, "b": 789, "c": 100};\njatos.submitResultData(resultData)\n   .then(() => console.log(\'success\'))\n   .catch(() => console.log(\'error\'));\n')))),(0,o.kt)("h3",{id:"jatosappendresultdata"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.appendResultData")),(0,o.kt)("p",null,"Appends result data to the already posted result data. Contrary to ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.submitResultData")," it does not overwrite the result data. Alternatively you can send result data with functions that jump to another component (e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.startComponent"),") or end the study (",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.endStudy"),"). It offers callbacks, either as parameter or via a ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),", to signal success or failure in the transfer. This function can be used several times during an component run to incrementally save result data."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} resultData")," - String or object that will be sent as result data. An object will be serialized to JSON (stringify)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onSuccess")," - Function to be called in case of successful submit"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onError")," - Function to be called in case of error"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Append result data to the already sent"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var resultData = { "a": 123, "b": 789, "c": 100 };\njatos.appendResultData(resultData);\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use mulitple ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.appendResultData")," in a row"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.appendResultData({"a": 1})\n   .then(() => jatos.appendResultData({"b": 2}))\n   .then(() => jatos.appendResultData({"c": 3}))\n   .catch(() => console.log(\'Something went wrong\'));\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"You can use it together with ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.startNextComponent")," to first append result data and afterwards jump to the next component"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var resultData = { "a": 123, "b": 789, "c": 100};\njatos.appendResultData(resultData, jatos.startNextComponent);\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Or by using the returned Promise"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var resultData = {"a": 123, "b": 789, "c": 100};\njatos.appendResultData(resultData)\n   .then(() => jatos.startNextComponent())\n   .catch(() => console.log(\'Something went wrong\'));\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Or together with ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.startComponentByPos")," to start a particular component (here at position 4)"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var resultData = {"a": 123, "b": 789, "c": 100};\njatos.appendResultData(resultData)\n   .then(() => jatos.startComponentByPos(4))\n   .catch(() => console.log(\'Something went wrong\'));\n')))),(0,o.kt)("h3",{id:"jatosuploadresultfile"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.uploadResultFile")),(0,o.kt)("p",null,"Uploads a file to the JATOS server where they are stored in the server's file system (but not in the database). Similar to result data it can be downloaded in the JATOS UI, in the result pages. The files are stored per component - that means you can use the same filename without overwriting the file if the upload happens from different components. It offers callbacks, either as parameter or via a ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),", to signal success or failure in the transfer."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {Blob, string or object} obj")," - Data to be uploaded as a file. Can be ",(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/Blob"},"Blob"),", a string, or a object. A Blob\twill be uploaded right away. A string is turned into a Blob. An object is\tfirst turned into a JSON string\tand\tthen into a Blob."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} filename")," - Name of the uploaded file"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onSuccess")," - Function to be called in case of success"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onError")," - Function to be called in case of error"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Upload text"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.uploadResultFile("this is my data", "example.txt")\n   .then(() => console.log("File was successfully uploaded"))\n   .catch(() => console.log("File upload failed"));\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Upload object as JSON"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var resultData = { "a": 123, "b": 789, "c": 100};\njatos.uploadResultFile(resultData, "example.json")\n   .then(() => console.log("File was successfully uploaded"))\n   .catch(() => console.log("File upload failed"));\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Upload text as Blob"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var blob = new Blob(["Hello, world!"], {type: \'text/plain\'});\njatos.uploadResultFile(blob, "example.txt")\n   .then(() => console.log("File was successfully uploaded"))\n   .catch(() => console.log("File upload failed"));\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Turn canvas into Blob and upload as image file. It assumes you have an canvas element with ID 'canvas'."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var canvas = document.getElementById(\'canvas\');\ncanvas.toBlob((blob) => {\n   jatos.uploadResultFile(blob, "canvas.png")\n      .then(() => console.log("File was successfully uploaded"))\n      .catch(() => console.log("File upload failed"));\n});\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"For more real-world examples have a look at the ",(0,o.kt)("a",{parentName:"p",href:"/Example-Studies"},"'Drawing' and the 'Video Recording' examples")))),(0,o.kt)("h3",{id:"jatosdownloadresultfile"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.downloadResultFile")),(0,o.kt)("p",null,"Downloads a file from the JATOS server. One can only download a file that was previously uploaded with ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.uploadResultFile")," in the same study run. If the file contains text it returns the content as a string. If the file contains JSON, it returns the JSON already parsed as an object. All other ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types"},"MIME types")," are returned as a Blob. It offers callbacks, either as parameter or via a ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),", to signal success or failure in the transfer."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} filename")," - Name of the uploaded file"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onSuccess")," - Function to be called in case of success"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onError")," - Function to be called in case of error"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,"Additionally you can specify the component position from where the file was uploaded (in case different components uploaded files with the same filename)"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {number} componentPos")," - Position of the component where the file was uploaded"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} filename")," - Name of the uploaded file"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onSuccess")," - Function to be called in case of success"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onError")," - Function to be called in case of error"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Download text file"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.downloadResultFile("example.txt")\n   .then((text) => console.log(text))\n   .catch(() => console.log("File download failed"));\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Download JSON file"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.downloadResultFile("example.json")\n   .then((obj) => console.log(JSON.stringify(obj)))\n   .catch(() => console.log("File download failed"));\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Download image and display it in a canvas element"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.downloadResultFile("canvas.png")\n   .then((blob) => { document.getElementById("canvas").src = URL.createObjectURL(blob) })\n   .catch(() => console.log("File download failed"));\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Download file and specify that the file was uploaded in the first component"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.downloadResultFile(1, "example.txt")\n   .then((text) => console.log(text))\n   .catch(() => console.log("File download failed"));\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"For more real-world examples have a look at the ",(0,o.kt)("a",{parentName:"p",href:"/Example-Studies"},"'Drawing' and the 'Video Recording' examples")))),(0,o.kt)("h2",{id:"batch-variables"},"Batch variables"),(0,o.kt)("h3",{id:"jatosbatchproperties"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.batchProperties")),(0,o.kt)("p",null,"All the properties you entered for this batch."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"jatos.batchProperties.allowedWorkerTypes")," - List of worker types that are currently allowed to run in this batch."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"jatos.batchProperties.maxActiveMembers")," - How many members a group can have at the same time"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"jatos.batchProperties.maxTotalMembers")," - How many members a group is allowed to have at the same time"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"jatos.batchProperties.maxTotalWorkers")," - Total amount of workers a group is allowed to have altogether in this batch"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"jatos.batchProperties.title")," - Title of this batch")),(0,o.kt)("h3",{id:"jatosbatchjsoninput"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.batchJsonInput")),(0,o.kt)("p",null,"The JSON input you entered in the batch's properties. This is ",(0,o.kt)("inlineCode",{parentName:"p"},"{}")," if the field was left empty."),(0,o.kt)("h2",{id:"batch-session-functions"},"Batch Session functions"),(0,o.kt)("p",null,"The Batch Session is stored in JATOS' database on the server side (see also ",(0,o.kt)("a",{parentName:"p",href:"Session-Data-Three-Types.html"},"Session Data - Three Types"),"). That means that all changes in the Batch Session have to be synchronized between the client and the server. This is done via the batch channel. Therefore all writing functions (",(0,o.kt)("inlineCode",{parentName:"p"},"add"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"remove"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"clear"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"replace"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"copy"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"move"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"set"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"setAll"),") can be paired with callback functions that will signal  success or failure in the client-server sync. These callback functions can be either passed as parameters to ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.batchSession.[function_name]")," or via a ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),"."),(0,o.kt)("p",null,"On the other side for all reading functions (",(0,o.kt)("inlineCode",{parentName:"p"},"get"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"find"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"getAll"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"test"),") there is no need to sync data between client and server, because ",(0,o.kt)("em",{parentName:"p"},"jatos.js")," keeps a copy of the Batch Session locally. Therefore all reading functions do not offer callbacks, because there is no risk of failure of synchronization."),(0,o.kt)("p",null,"Additionally to the reading and writing functions the calback function ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.onBatchSession(callback)")," offers a way to get notified whenever the Batch Session changes in the JATOS' database regardless of the origin of the change. This way, you can have the client of each worker react to changes in the batch that were done by another worker in the batch."),(0,o.kt)("p",null,"Accessing the Batch Session is done via ",(0,o.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc6902"},"JSON Patches (RFC 6902)")," and\n",(0,o.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc6901"},"JSON Pointer (RFC 6901)"),". An introduction can be found under ",(0,o.kt)("a",{parentName:"p",href:"http://jsonpatch.com/"},"jsonpatch.com"),". For JSON Patches ",(0,o.kt)("em",{parentName:"p"},"jatos.js")," uses the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Starcounter-Jack/JSON-Patch"},"JSON-Patch")," library from Joachim Wester and for JSON Pointers the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/alexeykuzmin/jsonpointer.js"},"jsonpointer.js")," library from Alexey Kuzmin."),(0,o.kt)("h3",{id:"jatosonbatchsession"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.onBatchSession")),(0,o.kt)("p",null,"Defines a callback function that is called every time the Batch Session changes on the JATOS server side (that includes updates in the session originating from other workers that run the study in parallel)."),(0,o.kt)("p",null,"The callback function has two parameter:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} path")," - JSON pointer to the changed field in the Batch Session"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} op")," - JSON patch operation ('add', 'remove', 'clear', ...) that was applied")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Log whenever something changes in the Batch session"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.onBatchSession(function(path, op){\n  console.log("Batch Session was updated in path " + path + " with operation " + op);\n});\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"onBatchSession")," is often used together with ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.batchSession.find")," to get the updated value:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.onBatchSession(function(path){\n  var changedObj = jatos.batchSession.find(path);\n  console.log("The changed object is " + JSON.stringify(changedObj));\n});\n')))),(0,o.kt)("h3",{id:"jatosbatchsessionget"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.batchSession.get")),(0,o.kt)("p",null,"Convenience function: like ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.batchSession.find")," but works with a key instead of a JSON Pointer. Therefore it works only on the first level of the session's object tree. It takes a name of a field within the Batch Session and returns the matching value, or ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined")," if the key does not exist. For all other levels of the object tree use ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.batchSession.find"),". Gets the object from the locally stored copy of the session and does not call the server."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} name")," - name of the field"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {object}")," - the value that is stored under name")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Get the value that belongs to a key in the Batch Session"),(0,o.kt)("p",{parentName:"li"},"If the Batch Session is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": 1000, "b": "watermelon"}')),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Since the parameter is the key\'s name and not a path it does not start with a "/"\nvar b = jatos.batchSession.get("b"); // b is "watermelon"\nvar c = jatos.batchSession.get("c"); // c is undefined\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"With ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.batchSession.get")," you can only access the first level of the object tree - if you want another level use ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.batchSession.find"),". If the Batch Session is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": {"a1": 123, "a2": "watermelon"}}')),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var a1 = jatos.batchSession.get("a1"); // a1 is undefined !!!\nvar a = jatos.batchSession.get("a"); // a is { "a1": 123, "a2": "watermelon" }\n')))),(0,o.kt)("h3",{id:"jatosbatchsessionset"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.batchSession.set")),(0,o.kt)("p",null,"A convenience function for ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.batchSession.add"),". Instead of a JSON Pointer path it accepts a name of the field to be stored (without a slash in front). Therefore it works only on the first level of the Batch Session's object tree. If the name already exists in the Batch Session the value will be overwritten."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} name")," - name of the field"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {object} value")," - value to be stored"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onSuccess")," - Function to be called if this patch was successfully applied on the server and the client side"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onError")," - Function to be called if this patch failed"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Set a key and its value in the Batch Session"),(0,o.kt)("p",{parentName:"li"},"If the Batch Session is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": 1234}')),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Since the parameter is the key\'s name and not a path it does not start with a "/"\nvar b = jatos.batchSession.set("b", "koala");\n')),(0,o.kt)("p",{parentName:"li"},"then after the Batch Session is successfully updated the new object is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": 1234, "b": "koala"}'),"."),(0,o.kt)("p",{parentName:"li"},"Since there is a slight chance that the session update was not successful it's a good idea to provide callback functions for both cases. To provide success or fail callback functions you can either specify the onSuccess/onError parameters or use the returned ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use returned Promise to handle success or failure"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.batchSession.set("b", "koala")\n   .then(() => console.log("Batch Session was successfully updated"))\n   .catch(() => console.log("Batch Session synchronization failed"));\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Have a series of Batch Session changes"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.batchSession.set("a", 1)\n   .then(() => jatos.batchSession.set("b", 2))\n   .then(() => jatos.batchSession.set("c", 3))\n   .catch(() => console.log("Batch Session synchronization failed"));\n')))),(0,o.kt)("h3",{id:"jatosbatchsessiongetall"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.batchSession.getAll")),(0,o.kt)("p",null,"Returns the complete Batch Session data. Gets the object from the locally stored copy of the session and does not call the server."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {object}")," Returns the whole Batch Session object")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"var batchSession = jatos.batchSession.getAll();\n")),(0,o.kt)("h3",{id:"jatosbatchsessionsetall"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.batchSession.setAll")),(0,o.kt)("p",null,"Replaces the whole session data. If the replacing object is rather large it might be better performance-wise to replace only individual paths. Each session writting involves sending the changes in the session via a JSON Patch to the JATOS server. If the session is large this data transfer can take some time. In this case use other session functions, like 'set', 'add', or 'replace'."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {object} value")," - value to be stored in the session"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onSuccess")," - Function to be called if this patch was successfully applied on the server and the client side"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onError")," - Function to be called if this patch failed"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Set the whole Batch Session object"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var o = {"a": 123, "b": "foo"};\njatos.batchSession.setAll(o); // Overwrites the current Batch Session with the object o\n')),(0,o.kt)("p",{parentName:"li"},"Since there is a slight chance that the session update was not successful it's a good idea to provide callback functions for both cases. To provide success or fail callback functions you can either specify the onSuccess/onError parameters or use the returned ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use returned Promise to handle success or failure"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var o = {"a": 123, "b": "foo"};\njatos.batchSession.setAll(o)\n   .then(() => console.log("Batch Session was successfully updated"))\n   .catch(() => console.log("Batch Session synchronization failed"));\n')))),(0,o.kt)("h3",{id:"jatosbatchsessionclear"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.batchSession.clear")),(0,o.kt)("p",null,"Clears the whole Batch Session data and sets it to an empty object ",(0,o.kt)("inlineCode",{parentName:"p"},"{}"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onSuccess")," - Function to be called if this patch was successfully applied on the server and the client side"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onError")," - Function to be called if this patch failed"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Clear the whole Batch Session"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.batchSession.clear();\n")),(0,o.kt)("p",{parentName:"li"},"Since there is a slight chance that the session update was not successful it's a good idea to provide callback functions for both cases. To provide success or fail callback functions you can either specify the onSuccess/onError parameters or use the returned ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use returned Promise to handle success or failure"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.batchSession.clear()\n   .then(() => console.log("Batch Session was successfully updated"))\n   .catch(() => console.log("Batch Session synchronization failed"));\n')))),(0,o.kt)("h3",{id:"jatosbatchsessionfind"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.batchSession.find")),(0,o.kt)("p",null,"Gets a field in the Batch Session data. Takes a JSON Pointer and returns the matching value, or ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined")," if the pointer does not correspond to an existing field. Gets the object from the locally stored copy of the session and does not call the server. Contrary to ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.batchSession.get")," it allows to get values from all levels of the Batch Session's object tree."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} path")," - JSON pointer path"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {object}")," - the value that is stored in path")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Find a field in the Batch Session"),(0,o.kt)("p",{parentName:"li"},"If the Batch Session is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": {"a1": "foo", "a2": "bar"}, "b": 999}')),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.batchSession.find("/a/a1"); // returns "foo"\njatos.batchSession.find("/b"); // returns 999\njatos.batchSession.find("/c/d"); // returns undefined\n')))),(0,o.kt)("h3",{id:"jatosbatchsessiondefined"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.batchSession.defined")),(0,o.kt)("p",null,"Checks in the Batch Session whether a field under the given path exists. Returns true if the field is defined and false otherwise. It's equivalent to ",(0,o.kt)("inlineCode",{parentName:"p"},"!jatos.batchSession.test(path, undefined)"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} path")," - JSON pointer path to be checked"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {boolean}")," - 'true' if the field is defined and 'false' otherwise")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.batchSession.defined(\"/a\"); // returns true if the pointer '/a' exists\n")),(0,o.kt)("h3",{id:"jatosbatchsessiontest"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.batchSession.test")),(0,o.kt)("p",null,"JSON Patch test operation: Tests that the specified value is set in the document (see ",(0,o.kt)("a",{parentName:"p",href:"http://jsonpatch.com/"},"jsonpatch.com"),")."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} path")," - JSON pointer path to be tested"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {object} value")," - value to be tested"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {boolean}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Test if a certain field in the Batch Session has a value"),(0,o.kt)("p",{parentName:"li"},"If the Batch Session is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": 123, "b": {"b1": "flowers", "b2": "animals"}}')),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.batchSession.test("/a", 123); // returns true\njatos.batchSession.test("/a", 10); // returns false\njatos.batchSession.test("/b/b1", "flowers"); // returns true\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"If you want to know the existence of a path in the Batch Session you can test against ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined"),". The function ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.batchSession.defined")," provides a shortcut for this use case."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'if (!jatos.batchSession.test("/c", undefined)) {\n  // Path "/c" exists\n} else {\n  // Path "/c" doesn\'t exist\n}\n')))),(0,o.kt)("h3",{id:"jatosbatchsessionadd"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.batchSession.add")),(0,o.kt)("p",null,"JSON Patch add operation: Adds a value to an object or inserts it into an array. In the case of an array, the value is inserted before the given index. The ",(0,o.kt)("inlineCode",{parentName:"p"},"-")," character can be used instead of an index to insert at the end of an array (see ",(0,o.kt)("a",{parentName:"p",href:"http://jsonpatch.com/"},"jsonpatch.com"),"). If the path already exists in the Batch Session the value will be overwritten. The patch will fail if a key other than the last path element is missing, e.g., when the path is ",(0,o.kt)("inlineCode",{parentName:"p"},'"/a/b/c"'),", if ",(0,o.kt)("inlineCode",{parentName:"p"},'"a"')," and ",(0,o.kt)("inlineCode",{parentName:"p"},'"b"')," do not already exist as keys, the patch will fail."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} path")," - JSON pointer path"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {object} value")," - value to be stored"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onSuccess")," - Function to be called if this patch was successfully applied on the server and the client side"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onError")," - Function to be called if this patch failed"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add to an empty Batch Session"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.batchSession.add("/a", 100);\n')),(0,o.kt)("p",{parentName:"li"},"After the Batch Session is successfully updated the new object is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": 100}'),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add to Batch Session"),(0,o.kt)("p",{parentName:"li"},"If the Batch Session is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": 100}')," and one calls"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.batchSession.add("/b", 123);\n')),(0,o.kt)("p",{parentName:"li"},"then after the Batch Session is successfully updated the new object is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": 100, "b": 123}'),"."),(0,o.kt)("p",{parentName:"li"},"Since there is a slight chance that the session update was not successful it's a good idea to provide callback functions for both cases. To provide success or fail callback functions you can either specify the onSuccess/onError parameters or use the returned ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use returned Promise to handle success or fail"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.batchSession.add("/b", 123)\n   .then(() => console.log("Batch Session was successfully updated"))\n   .catch(() => console.log("Batch Session synchronization failed"));\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add an object:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.batchSession.add("/obj", { foo: "bar" })\n   .then(() => console.log("Batch Session was successfully updated"))\n   .catch(() => console.log("Batch Session synchronization failed"));\n')),(0,o.kt)("p",{parentName:"li"},"Afterwards the Batch Session contains ",(0,o.kt)("inlineCode",{parentName:"p"},'{"obj": {"foo": "bar"}}'),".\nNote that ",(0,o.kt)("inlineCode",{parentName:"p"},'jatos.batchSession.add("/obj/foo", "bar")')," will fail if ",(0,o.kt)("inlineCode",{parentName:"p"},'"/obj"')," does not already point to an object.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add an array:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.batchSession.add("/array", [1, 2, 3])\n   .then(() => console.log("Batch Session was successfully updated"))\n   .catch(() => console.log("Batch Session synchronization failed"));\n')),(0,o.kt)("p",{parentName:"li"},"Afterwards the Batch Session contains ",(0,o.kt)("inlineCode",{parentName:"p"},'{"array": [1, 2, 3]}'),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add an element to an array:"),(0,o.kt)("p",{parentName:"li"},"If the Batch Session is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"array": [1, 2, 3]}')," and one calls"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.batchSession.add("/array/2", "new")\n   .then(() => console.log("Batch Session was successfully updated"))\n   .catch(() => console.log("Batch Session synchronization failed"));\n')),(0,o.kt)("p",{parentName:"li"},"then afterwards the Batch Session contains ",(0,o.kt)("inlineCode",{parentName:"p"},'{"array": [1, 2, "new", 3]}'),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Append to the end of an array using ",(0,o.kt)("inlineCode",{parentName:"p"},"/-"),":"),(0,o.kt)("p",{parentName:"li"},"If the Batch Session is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"array": [1, 2, 3]}')," and one calls"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.batchSession.add("/array/-", "new")\n   .then(() => console.log("Batch Session was successfully updated"))\n   .catch(() => console.log("Batch Session synchronization failed"));\n')),(0,o.kt)("p",{parentName:"li"},"then afterwards the Batch Session contains ",(0,o.kt)("inlineCode",{parentName:"p"},'{"array": [1, 2, 3, "new"]}'),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Have a series of Batch Session updates"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.batchSession.add("/a", 1)\n   .then(() => jatos.batchSession.add("/b", 2))\n   .then(() => jatos.batchSession.add("/c", 3))\n   .catch(() => console.log("Batch Session synchronization failed"));\n')))),(0,o.kt)("h3",{id:"jatosbatchsessionremove"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.batchSession.remove")),(0,o.kt)("p",null,"JSON Patch remove operation: Removes a value from an object or array (see ",(0,o.kt)("a",{parentName:"p",href:"http://jsonpatch.com/"},"jsonpatch.com"),")."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} path")," - JSON pointer path to the field that should be removed"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onSuccess")," - Function to be called if this patch was successfully applied on the server and the client side"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onError")," - Function to be called if this patch failed"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Remove from the Batch Session"),(0,o.kt)("p",{parentName:"li"},"If the Batch Session is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": 100, "b": 123}')," and one calls"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.batchSession.remove("/b");\n')),(0,o.kt)("p",{parentName:"li"},"then after the Batch Session is successfully updated the new object is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": 100}'),"."),(0,o.kt)("p",{parentName:"li"},"Since there is a slight chance that the session update was not successful it's a good idea to provide callback functions for both cases. To provide success or fail callback functions you can either specify the onSuccess/onError parameters or use the returned ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use returned Promise to handle success or failure"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.batchSession.remove("/b")\n   .then(() => console.log("Batch Session was successfully updated"))\n   .catch(() => console.log("Batch Session synchronization failed"));\n')))),(0,o.kt)("h3",{id:"jatosbatchsessionreplace"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.batchSession.replace")),(0,o.kt)("p",null,"JSON Patch replace operation: Replaces a value. Equivalent to a 'remove' followed by an 'add' (see ",(0,o.kt)("a",{parentName:"p",href:"http://jsonpatch.com/"},"jsonpatch.com"),")."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} path")," - JSON pointer path"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {object} value")," - value to be replaced with"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onSuccess")," - Function to be called if this patch was successfully applied on the server and the client side"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onError")," - Function to be called if this patch failed"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Replace in the Batch Session"),(0,o.kt)("p",{parentName:"li"},"If the Batch Session is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": 100, "b": 123}')," and one calls"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.batchSession.replace("/b", 789);\n')),(0,o.kt)("p",{parentName:"li"},"then after the Batch Session is successfully updated the new object is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": 100, "b": 789}'),"."),(0,o.kt)("p",{parentName:"li"},"Since there is a slight chance that the session update was not successful it's a good idea to provide callback functions for both cases. To provide success or fail callback functions you can either specify the onSuccess/onError parameters or use the returned ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use returned Promise to handle success or failure"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.batchSession.replace("/b", 789)\n   .then(() => console.log("Batch Session was successfully updated"))\n   .catch(() => console.log("Batch Session synchronization failed"));\n')))),(0,o.kt)("h3",{id:"jatosbatchsessioncopy"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.batchSession.copy")),(0,o.kt)("p",null,"JSON Patch copy operation: Copies a value from one location to another within the JSON document. Both from and path are JSON Pointers (see ",(0,o.kt)("a",{parentName:"p",href:"http://jsonpatch.com/"},"jsonpatch.com"),")."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} from")," - JSON pointer path to the origin"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} path")," - JSON pointer path to the target"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onSuccess")," - Function to be called if this patch was successfully applied on the server and the client side"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onError")," - Function to be called if this patch failed"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Copy within the Batch Session from one location to another"),(0,o.kt)("p",{parentName:"li"},"If the Batch Session is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": "jatos"}')," and one calls"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.batchSession.copy("/a", "/b");\n')),(0,o.kt)("p",{parentName:"li"},"then after the Batch Session is successfully updated the new object is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": "jatos", "b": "jatos"}'),"."),(0,o.kt)("p",{parentName:"li"},"Since there is a slight chance that the session update was not successful it's a good idea to provide callback functions for both cases. To provide success or fail callback functions you can either specify the onSuccess/onError parameters or use the returned ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use returned Promise to handle success or failure"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.batchSession.copy("/a", "/b")\n   .then(() => console.log("Batch Session was successfully updated"))\n   .catch(() => console.log("Batch Session synchronization failed"));\n')))),(0,o.kt)("h3",{id:"jatosbatchsessionmove"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.batchSession.move")),(0,o.kt)("p",null,"JSON Patch move operation: Moves a value from one location to the other. Both from and path are JSON Pointers. (see ",(0,o.kt)("a",{parentName:"p",href:"http://jsonpatch.com/"},"jsonpatch.com"),")."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} from")," - JSON pointer path to the origin"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} path")," - JSON pointer path to the target"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onSuccess")," - Function to be called if this patch was successfully applied on the server and the client side"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onError")," - Function to be called if this patch failed"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Move within the Batch Session from one location to another"),(0,o.kt)("p",{parentName:"li"},"If the Batch Session is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": "jatos"}')," and one calls"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.batchSession.move("/a", "/b");\n')),(0,o.kt)("p",{parentName:"li"},"then after the Batch Session is successfully updated the new object is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"b": "jatos"}'),"."),(0,o.kt)("p",{parentName:"li"},"Since there is a slight chance that the session update was not successful it's a good idea to provide callback functions for both cases. To provide success or fail callback functions you can either specify the onSuccess/onError parameters or use the returned ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use returned Promise to handle success or failure"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.batchSession.move("/a", "/b")\n   .then(() => console.log("Batch Session was successfully updated"))\n   .catch(() => console.log("Batch Session synchronization failed"));\n')))),(0,o.kt)("h3",{id:"jatosbatchsessionversioning"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.batchSessionVersioning")),(0,o.kt)("p",null,"This flag can be used to turn off versioning of the batch session. This speeds up updates to the batch session (patches) in certain cases where all concurrent patches are conflict-free between each other. If versioning is turned on (set to true) all session data patches are accompanied by a version. On the JATOS server side only a patch with the current version (as stored in the database) is applied. If there are multiple concurrent patches only the first one is applied. If versioning is turned off all patches arriving at the JATOS server are applied right away without checking the version. This is faster but can lead to unintended session data changes. By default versioning is turned on."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.batchSessionVersioning = false; // Turns off versioning\n")),(0,o.kt)("h2",{id:"group-variables"},"Group variables"),(0,o.kt)("p",null,"The group variables are only filled with values if the current study run is a group study."),(0,o.kt)("h3",{id:"jatosgroupmemberid-1"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.groupMemberId")),(0,o.kt)("p",null,"Group member ID is unique for this member (it is actually identical with the study result ID)"),(0,o.kt)("h3",{id:"jatosgroupresultid-1"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.groupResultId")),(0,o.kt)("p",null,"ID of this group result (It's called group result to be consistent with the study result and the component result - although often it's just called group)"),(0,o.kt)("h3",{id:"jatosgroupmembers"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.groupMembers")),(0,o.kt)("p",null,"List of member IDs of the current members of the group"),(0,o.kt)("h3",{id:"jatosgroupchannels"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.groupChannels")),(0,o.kt)("p",null,"List of member IDs of the currently open group channels"),(0,o.kt)("h2",{id:"group-functions"},"Group functions"),(0,o.kt)("h3",{id:"jatosjoingroup"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.joinGroup")),(0,o.kt)("p",null,"Tries to join a group and if it succeeds opens the group channel (which is mostly a WebSocket). Only if the group channel is open one can exchange data with other group members. As the only parameter this function takes an object that consists of several optional callback functions that will be called by ",(0,o.kt)("em",{parentName:"p"},"jatos.js")," when certain group events occur. It returns a ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),", to signal success or failure in joining."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {object} callbacks")," - Defining callback functions for group events. All callbacks are optional. These callbacks functions are:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"onOpen"),": Is called when the group channel is successfully opened"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"onClose"),": Is be called when the group channel is closed"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"onError"),": Is called if an error during opening of the group channel's WebSocket occurs or if an error is received via the group channel (e.g. the Group Session data couldn't be updated). If this function is not defined ",(0,o.kt)("em",{parentName:"li"},"jatos.js")," will try to call the global ",(0,o.kt)("inlineCode",{parentName:"li"},"onJatosError")," function."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"onMessage(msg)"),": Is called if a message from another group member is received. It gets the message as a parameter."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"onMemberJoin(memberId)"),": Is called when another member (not the worker running this study) joined the group. It gets the group member ID as a parameter."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"onMemberOpen(memberId)"),": Is called when another member (not the worker running this study) opened a group channel. It gets the group member ID as a parameter."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"onMemberLeave(memberId)"),": Is called when another member (not the worker running his study) left the group. It gets the group member ID as a parameter."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"onMemberClose(memberId)"),": Is called when another member (not the worker running this study) closed his group channel. It gets the group member ID as a parameter."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"onGroupSession(path, op)"),": Is called every time the Group Session changes on the JATOS server side. It gets two parameters: 1) JSON pointer path to the changed field in the Group Session as a parameter, and 2) JSON patch operation."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"onUpdate()"),": Combines several other callbacks. It's called if one of the following is called: ",(0,o.kt)("inlineCode",{parentName:"li"},"onMemberJoin"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"onMemberOpen"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"onMemberLeave"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"onMemberClose"),", or ",(0,o.kt)("inlineCode",{parentName:"li"},"onGroupSession"),"."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Minimal example that joins a group and receives updates via the Group Session"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.joinGroup({\n  "onGroupSession": onGroupSession\n});\n\nfunction onGroupSession(path, op) {\n  var changedObj = jatos.groupSession.find(path);\n  console.log("Group Session was updated in path " + path + " with operation " + op + " to " + JSON.stringify(changedObj));\n}\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Example that defines the ",(0,o.kt)("inlineCode",{parentName:"p"},"onOpen"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"onMemberOpen"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"onMessage")," callbacks"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.joinGroup({\n  "onOpen": onOpen,\n  "onMemberOpen": onMemberOpen,\n  "onMessage": onMessage\n});\n\nfunction onOpen() {\n  console.log("You joined a group and opened a group channel");\n}\n\nfunction onMemberOpen(memberId) {\n  console.log("In our group another member (ID " + memberId + ") opened a group channel");\n}\n\nfunction onMessage(msg) {\n  console.log("You received a message: " + msg);\n}\n')))),(0,o.kt)("h3",{id:"jatossendgroupmsg"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.sendGroupMsg")),(0,o.kt)("p",null,"Sends a message to all group members with an open group channel. Use ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.sendGroupMsgTo")," to send a message to a particular member."),(0,o.kt)("p",null,"Between group members data can be exchanged in fundamentally two different ways: sendGroupMsg/sendGroupMsgTo or the ",(0,o.kt)("a",{parentName:"p",href:"#functions-to-access-the-group-session"},"Group Session"),". The main difference is that the Group Session is stored in JATOS database on the server side while with sendGroupMsg/sendGroupMsgTo the data are only relayed on the server side but is never stored. E.g. if the worker reloads the page all prior messages sent by sendGroupMsg/sendGroupMsgTo will be lost - on the other side, everything stored in the Group Session will be restored. But this storage of the Group Session in JATOS comes at the cost of being (slightly) slower. Which option to choose depends mostly on your study design. If you expect your workers to have an unreliable Internet connection or to reload the page then you should use the Group Session. If you just want to 'stream' current data to other members the use sendGroupMsg/sendGroupMsgTo."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {object} msg")," - Any JavaScript object")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var msg = "Message for every group member"; // Send a text message\njatos.sendGroupMsg(msg)\n\nvar objMsg = {"city": "Berlin", "population": 3500000}; // Send an object\njatos.sendGroupMsg(objMsg)\n')),(0,o.kt)("h3",{id:"jatossendgroupmsgto"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.sendGroupMsgTo")),(0,o.kt)("p",null,"Like ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.sendGroupMsg")," but sends a message to a particular group member specified by the group member ID. You can find a list of all IDs of group members with an open channel ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.groupChannels"),". Alternativally you get member IDs via the ",(0,o.kt)("inlineCode",{parentName:"p"},"onMemberOpen")," callback function."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} recipient")," - Recipient's group member ID"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {object} msg")," - Any JavaScript object")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Send a message to a group member with ID 1063"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var msg = "Message for group member 1063";\njatos.sendGroupMsgTo("1063", msg)\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"onMemberOpen")," callback to send a message right after a new member opened their group channel"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.joinGroup({\n  "onMemberOpen": onMemberOpen,\n  "onMessage": onMessage\n});\n\nfunction onMemberOpen(memberId) {\n  var msg = "Welcome to the group!";\n  jatos.sendGroupMsgTo(memberId, msg);\n}\n\nfunction onMessage(msg) {\n   console.log("You received a message: " + msg);\n}\n')))),(0,o.kt)("h3",{id:"jatosleavegroup"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.leaveGroup")),(0,o.kt)("p",null,"Leaves the group it has previously joined. It offers callbacks, either as parameter or via a ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),", to signal success or failure in the leaving."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onSuccess")," - Function to be called after the group is left"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onError")," - Function to be called in case of error"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.leaveGroup();\n")),(0,o.kt)("h3",{id:"jatosreassigngroup"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.reassignGroup")),(0,o.kt)("p",null,"Asks the JATOS server to reassign this study run to a different group. JATOS can only reassign if there is another group availible. It offers callbacks, either as parameter or via a ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),", to signal success or failure in the reassigning."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onSuccess")," - Function to be called if the reassignment was successful"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onFail")," - Function to be called if the reassignment was unsuccessful"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.reassignGroup()\n   .then(() => console.log("Successful group reassignment: new group ID is " + jatos.groupResultId))\n   .catch(() => console.log("Group reassignment failed"));\n')),(0,o.kt)("h3",{id:"jatossetgroupfixed"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.setGroupFixed")),(0,o.kt)("p",null,"Ask the JATOS server to fix this group. A fixed group is not allowed to take on more members although members are still allowed to leave. It offers callbacks, either as parameter or via a ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),", to signal success or failure in the fixing."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onSuccess")," - Function to be called if the fixing was successful"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional function} onFail")," - Function to be called if the fixing was unsuccessful"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.setGroupFixed();\n")),(0,o.kt)("h3",{id:"jatoshasjoinedgroup"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.hasJoinedGroup")),(0,o.kt)("p",null,"Returns true if this study run joined a group and false otherwise. It doesn't necessarily mean that we have an open group channel. We might just have joined a group in a prior component but in this component never opened the channel. If you want to check for an open group channel use ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.hasOpenGroupChannel"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"if(jatos.hasJoinedGroup()) {\n  // We are member in a group\n} else {\n  // We are not member in a group\n};\n")),(0,o.kt)("h3",{id:"jatoshasopengroupchannel"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.hasOpenGroupChannel")),(0,o.kt)("p",null,"Returns true if we currently have an open group channel and false otherwise. Since you can't open a group channel without joining a group, it also means that we joined a group. On the other side although we have closed group channel we can still be a member in a group. Use ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.hasJoinedGroup")," to check group membership."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"if(jatos.hasOpenGroupChannel()) {\n  // We are member in a group and have an open group channel\n} else {\n  // We do not have an open group channel (but could still be member in a group)\n};\n")),(0,o.kt)("h3",{id:"jatosismaxactivememberreached"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.isMaxActiveMemberReached")),(0,o.kt)("p",null,"Returns true if the group has reached the maximum amount of active members like specified in the batch properties. It's not necessary that each member has an open group channel."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"if(jatos.isMaxActiveMemberReached()) {\n  // Maximum number of active members is reached\n};\n")),(0,o.kt)("h3",{id:"jatosismaxactivememberopen"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.isMaxActiveMemberOpen")),(0,o.kt)("p",null,"Returns true if the group has reached the maximum amount of active members like specified in the batch properties and each member has an open group channel."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"if(jatos.isMaxActiveMemberOpen()) {\n  // Maximum number of active members is reached and each has an open channel\n};\n")),(0,o.kt)("h3",{id:"jatosisgroupopen"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.isGroupOpen")),(0,o.kt)("p",null,"Returns true if all active members of the group have an open group channel and can send and receive data. It's not necessary that the group has reached its minimum or maximum active member size."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"if(jatos.isGroupOpen()) {\n  // Each of the current members of the group have an open group channel\n};\n")),(0,o.kt)("h2",{id:"functions-to-access-the-group-session"},"Functions to access the Group Session"),(0,o.kt)("p",null,"The Group Session is one of three way to communicate between members of a group. The others are direct messaging (with ",(0,o.kt)("a",{parentName:"p",href:"#jatossendgroupmsgtorecipient-msg"},"jatos.sendGroupMsgTo"),") and broadcast messaging (",(0,o.kt)("a",{parentName:"p",href:"#jatossendgroupmsgmsg"},"jatos.sendGroupMsg"),") (or: ",(0,o.kt)("a",{parentName:"p",href:"/Session-Data-Three-Types.html"},"more general information about the different session types"),")."),(0,o.kt)("p",null,"In difference to the ",(0,o.kt)("a",{parentName:"p",href:"#functions-to-access-the-batch-session"},"Batch Session")," the Group Session doesn't work from the start of a component. To use the Group Session you have to join a group (",(0,o.kt)("a",{parentName:"p",href:"#jatosjoingroupcallbacks"},"with jatos.joinGroup"),"). There you can also define a ",(0,o.kt)("inlineCode",{parentName:"p"},"onGroupSession")," callback that gets called each time the Group Session changes regardless of the origin of the change."),(0,o.kt)("p",null,"The Group Session is stored in JATOS' database on the server side. That means that all changes in the Group Session have to be synchronized between the client and the server. This is done via the group channel. Therefore all writing functions (",(0,o.kt)("inlineCode",{parentName:"p"},"add"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"remove"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"clear"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"replace"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"copy"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"move"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"set"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"setAll"),") can be paired with callback functions that will signal  success or failure in the client-server sync. These callback functions can be either passed as parameters to ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.groupSession.[function_name]")," or via a ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),"."),(0,o.kt)("p",null,"On the other side for all reading functions (",(0,o.kt)("inlineCode",{parentName:"p"},"get"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"find"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"getAll"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"test"),") there is no need to sync data between client and server, because ",(0,o.kt)("em",{parentName:"p"},"jatos.js")," keeps a copy of the Group Session locally. Therefore all reading functions do not offer callbacks, because there is no risk of failure of synchronization."),(0,o.kt)("p",null,"Accessing the Group Session is done via ",(0,o.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc6902"},"JSON Patches (RFC 6902)")," and\n",(0,o.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc6901"},"JSON Pointer (RFC 6901)"),". An introduction can be found under ",(0,o.kt)("a",{parentName:"p",href:"http://jsonpatch.com/"},"jsonpatch.com"),". For JSON Patches ",(0,o.kt)("em",{parentName:"p"},"jatos.js")," uses the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Starcounter-Jack/JSON-Patch"},"JSON-Patch")," library from Joachim Wester and for JSON Pointers the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/alexeykuzmin/jsonpointer.js"},"jsonpointer.js")," library from Alexey Kuzmin."),(0,o.kt)("h3",{id:"jatosgroupsessionget"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.groupSession.get")),(0,o.kt)("p",null,"Convenience function: like ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.groupSession.find")," but works with a key instead of a JSON Pointer (without the slash in front of the key name). Therefore it works only on the first level of the session's object tree. It takes a name of an field within the Group Session and returns the matching value, or ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined")," if the key does not exist. For all other levels of the object tree use jatos.groupSession.find. Gets the object from the locally stored copy of the session and does not call the server."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} name")," - name of the field"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {object}")," - the value that is stored under name")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Get a field from the Group Session"),(0,o.kt)("p",{parentName:"li"},"Given the Group Session is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": 1000, "b": "watermelon"}')),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Since the parameter is the key\'s name and not a path it does not start with a "/"\nvar b = jatos.groupSession.get("b"); // b is "watermelon"\nvar c = jatos.groupSession.get("c"); // c is undefined\n')),(0,o.kt)("p",{parentName:"li"},'the first line returns "watermelon" and the second undefined.')),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"With ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.groupSession.get")," you can only access the first level of the object tree - if you want another level use ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.groupSession.find"),"."),(0,o.kt)("p",{parentName:"li"},"If the Group Session is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": {"a1": 123, "a2": "watermelon"}}')),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var a1 = jatos.groupSession.get("a1"); // a1 is undefined !!!\nvar a = jatos.groupSession.get("a"); // a is { "a1": 123, "a2": "watermelon" }\n')))),(0,o.kt)("h3",{id:"jatosgroupsessionset"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.groupSession.set")),(0,o.kt)("p",null,"A convenience function for ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.groupSession.add"),". Instead of a JSON Pointer path it accepts a name of the field to be stored (without the slash in front). Therefore it works only on the first level of the Group Session's object tree. If the name already exists in the Group Session the value will be overwritten."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} name")," - name of the field"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {object} value")," - value to be stored"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onSuccess")," - Function to be called if this patch was successfully applied on the server and the client side"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onError")," - Function to be called if this patch failed"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Set a field in the Group Session"),(0,o.kt)("p",{parentName:"li"},"If the Group Session is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": 1234}')),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Since the parameter is the key\'s name and not a path it does not start with a "/"\nvar b = jatos.groupSession.set("b", "koala");\n')),(0,o.kt)("p",{parentName:"li"},"then after the Group Session is successfully updated the new object is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": 1234, "b": "koala"}'),"."),(0,o.kt)("p",{parentName:"li"},"Since there is a slight chance that the session update was not successful it's a good idea to provide callback functions for both cases. To provide success or fail callback functions you can either specify the onSuccess/onError parameters or use the returned ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use returned Promise to handle success or failure"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.groupSession.set("b", "koala")\n   .then(() => console.log("Group Session was successfully updated"))\n   .catch(() => console.log("Group Session synchronization failed"));\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Have a series of Group Session changes"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.groupSession.set("a", 1)\n   .then(() => jatos.groupSession.set("b", 2))\n   .then(() => jatos.groupSession.set("c", 3))\n   .catch(() => console.log("Group Session synchronization failed"));\n')))),(0,o.kt)("h3",{id:"jatosgroupsessiongetall"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.groupSession.getAll")),(0,o.kt)("p",null,"Returns the complete Group Session data (might be bad performance-wise). Gets the object from the locally stored copy of the session and does not call the server."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {object}")," Returns the whole Group Session object")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"var groupSession = jatos.groupSession.getAll();\n")),(0,o.kt)("h3",{id:"jatosgroupsessionsetall"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.groupSession.setAll")),(0,o.kt)("p",null,"Replaces the whole session data. If the replacing object is rather large it might be better performance-wise to replace only individual paths. Each session writting involves sending the changes in the session via a JSON Patch to the JATOS server. If the session is large this data transfer can take some time. In this case use other session functions, like 'set', 'add', or 'replace'."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {object} value")," - value to be stored in the session"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onSuccess")," - Function to be called if this patch was successfully applied on the server and the client side"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onError")," - Function to be called if this patch failed"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Set the whole Group Session at once"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var o = {"a": 123, "b": "foo"};\njatos.groupSession.setAll(o); // Overwrites the current Group Session with the object o\n')),(0,o.kt)("p",{parentName:"li"},"Since there is a slight chance that the session update was not successful it's a good idea to provide callback functions for both cases. To provide success or fail callback functions you can either specify the onSuccess/onError parameters or use the returned ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use returned Promise to handle success or failure"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var o = {"a": 123, "b": "foo"};\njatos.groupSession.setAll(o)\n   .then(() => console.log("Group Session was successfully updated"))\n   .catch(() => console.log("Group Session synchronization failed"));\n')))),(0,o.kt)("h3",{id:"jatosgroupsessionclear"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.groupSession.clear")),(0,o.kt)("p",null,"Clears the whole Group Session data and sets it to an empty object ",(0,o.kt)("inlineCode",{parentName:"p"},"{}"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onSuccess")," - Function to be called if this patch was successfully applied on the server and the client side"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onError")," - Function to be called if this patch failed"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Clear the whole Group Session"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.groupSession.clear();\n")),(0,o.kt)("p",{parentName:"li"},"Since there is a slight chance that the session update was not successful it's a good idea to provide callback functions for both cases. To provide success or fail callback functions you can either specify the onSuccess/onError parameters or use the returned ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use returned Promise to handle success or failure"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.groupSession.clear()\n   .then(() => console.log("Group Session was successfully updated"))\n   .catch(() => console.log("Group Session synchronization failed"));\n')))),(0,o.kt)("h3",{id:"jatosgroupsessionfind"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.groupSession.find")),(0,o.kt)("p",null,"Gets a field in the Group Session data. Takes a JSON Pointer and returns the matching value, or ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined")," if the pointer does not correspond to an existing field. Gets the object from the locally stored copy of the session and does not call the server. Contrary to ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.groupSession.get")," it allows to get values from all levels of the Group Session's object tree."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} path")," - JSON pointer path"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {object}")," - the value that is stored in path")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("p",null,"Given the Group Session is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": {"a1": "foo", "a2": "bar"}, "b": 999}')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.groupSession.find("/a/a1"); // returns "foo"\njatos.groupSession.find("/b"); // returns 999\njatos.groupSession.find("/c/d"); // returns undefined\n')),(0,o.kt)("p",null,'the first line returns "foo" and the second 999.'),(0,o.kt)("h3",{id:"jatosgroupsessiondefined"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.groupSession.defined")),(0,o.kt)("p",null,"Checks in the Group Session whether a field under the given path exists. Returns true if the field is defined and false otherwise. It's equivalent to ",(0,o.kt)("inlineCode",{parentName:"p"},"!jatos.groupSession.test(path, undefined)"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} path")," - JSON pointer path to be checked"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {boolean}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.groupSession.defined(\"/a\"); // returns true if the pointer '/a' exists\n")),(0,o.kt)("h3",{id:"jatosgroupsessiontest"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.groupSession.test")),(0,o.kt)("p",null,"JSON Patch test operation: Tests that the specified value is set in the document (see ",(0,o.kt)("a",{parentName:"p",href:"http://jsonpatch.com/"},"jsonpatch.com"),")."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} path")," - JSON pointer path to be tested"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {object} value")," - value to be tested"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {boolean}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Test if a certain field in the Group Session has a value"),(0,o.kt)("p",{parentName:"li"},"Given the Group Session is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": 123, "b": {"b1": "flowers", "b2": "animals"}}')),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.groupSession.test("/a", 123); // returns true\njatos.groupSession.test("/a", 10); // returns false\njatos.groupSession.test("/b/b1", "flowers"); // returns true\n')))),(0,o.kt)("p",null,"the first line returns true, second false and third true."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"If you want to know the existence of a path in the Group Session you can test against ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined"),". The function ",(0,o.kt)("inlineCode",{parentName:"p"},"jatos.groupSession.defined")," provides a shortcut for this use case."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'if (!jatos.groupSession.test("/c", undefined)) {\n  // Path "/c" exists\n} else {\n  // Path "/c" doesn\'t exist\n}\n')))),(0,o.kt)("h3",{id:"jatosgroupsessionadd"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.groupSession.add")),(0,o.kt)("p",null,"JSON Patch add operation: Adds a value to an object or inserts it into an array. In the case of an array, the value is inserted before the given index. The ",(0,o.kt)("inlineCode",{parentName:"p"},"-")," character can be used instead of an index to insert at the end of an array (see ",(0,o.kt)("a",{parentName:"p",href:"http://jsonpatch.com/"},"jsonpatch.com"),"). If the path already exists in the Group Session the value will be overwritten. The patch will fail if a key other than the last path element is missing, e.g., when the path is ",(0,o.kt)("inlineCode",{parentName:"p"},'"/a/b/c"'),", if ",(0,o.kt)("inlineCode",{parentName:"p"},'"a"')," and ",(0,o.kt)("inlineCode",{parentName:"p"},'"b"')," do not already exist as keys, the patch will fail."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} path")," - JSON pointer path"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {object} value")," - value to be stored"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onSuccess")," - Function to be called if this patch was successfully applied on the server and the client side"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onError")," - Function to be called if this patch failed"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add an a field to the empty Group Session"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.groupSession.add("/a", 100);\n')),(0,o.kt)("p",{parentName:"li"},"After the Group Session is successfully updated the new object is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": 100}'),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add an a field to the Group Session"),(0,o.kt)("p",{parentName:"li"},"If the Group Session is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": 100}')," and one calls"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.groupSession.add("/b", 123);\n')),(0,o.kt)("p",{parentName:"li"},"then after the Group Session is successfully updated the new object is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": 100, "b": 123}'),"."),(0,o.kt)("p",{parentName:"li"},"Since there is a slight chance that the session update was not successful it's a good idea to provide callback functions for both cases. To provide success or fail callback functions you can either specify the onSuccess/onError parameters or use the returned ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use returned Promise to handle success or failure"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.groupSession.add("/b", 123)\n   .then(() => console.log("Group Session was successfully updated"))\n   .catch(() => console.log("Group Session synchronization failed"));\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add an object:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.groupSession.add("/obj", { foo: "bar" })\n   .then(() => console.log("Group Session was successfully updated"))\n   .catch(() => console.log("Group Session synchronization failed"));\n')),(0,o.kt)("p",{parentName:"li"},"Afterwards the Group Session contains ",(0,o.kt)("inlineCode",{parentName:"p"},'{"obj": {"foo": "bar"}}'),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add to a nested object:"),(0,o.kt)("p",{parentName:"li"},"If the Group Session is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": {"b": {}}}')," and one calls"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.groupSession.add("/a/b/c", 123)\n   .then(() => console.log("Group Session was successfully updated"))\n   .catch(() => console.log("Group Session synchronization failed"));\n')),(0,o.kt)("p",{parentName:"li"},"then afterwards the Group Session contains ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": {"b": {"c": 123}}}'),"."),(0,o.kt)("p",{parentName:"li"},"Note that ",(0,o.kt)("inlineCode",{parentName:"p"},'jatos.groupSession.add("/a/b/c", 123)')," will fail if ",(0,o.kt)("inlineCode",{parentName:"p"},'"a"')," and ",(0,o.kt)("inlineCode",{parentName:"p"},'"b"')," do not exists and ",(0,o.kt)("inlineCode",{parentName:"p"},'"b"')," is not an object.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add an array:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.groupSession.add("/array", [1, 2, 3])\n   .then(() => console.log("Group Session was successfully updated"))\n   .catch(() => console.log("Group Session synchronization failed"));\n')),(0,o.kt)("p",{parentName:"li"},"Afterwards the Group Session contains ",(0,o.kt)("inlineCode",{parentName:"p"},'{"array": [1, 2, 3]}'),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add an element to an array:"),(0,o.kt)("p",{parentName:"li"},"If the Group Session is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"array": [1, 2, 3]}')," and one calls"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.groupSession.add("/array/2", "new")\n   .then(() => console.log("Group Session was successfully updated"))\n   .catch(() => console.log("Group Session synchronization failed"));\n')),(0,o.kt)("p",{parentName:"li"},"then afterwards the Group Session contains ",(0,o.kt)("inlineCode",{parentName:"p"},'{"array": [1, 2, "new", 3]}'),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Append to the end of an array using ",(0,o.kt)("inlineCode",{parentName:"p"},"/-"),":"),(0,o.kt)("p",{parentName:"li"},"If the Group Session is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"array": [1, 2, 3]}')," and one calls"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.groupSession.add("/array/-", "new")\n   .then(() => console.log("Group Session was successfully updated"))\n   .catch(() => console.log("Group Session synchronization failed"));\n')),(0,o.kt)("p",{parentName:"li"},"then afterwards the Group Session contains ",(0,o.kt)("inlineCode",{parentName:"p"},'{"array": [1, 2, 3, "new"]}'),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Have a series of Group Session updates"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.groupSession.add("/a", 1)\n   .then(() => jatos.groupSession.add("/b", 2))\n   .then(() => jatos.groupSession.add("/c", 3))\n   .catch(() => console.log("Group Session synchronization failed"));\n')))),(0,o.kt)("h3",{id:"jatosgroupsessionremove"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.groupSession.remove")),(0,o.kt)("p",null,"JSON Patch remove operation: Removes a value from an object or array (see ",(0,o.kt)("a",{parentName:"p",href:"http://jsonpatch.com/"},"jsonpatch.com"),")."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} path")," - JSON pointer path to the field that should be removed"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onSuccess")," - Function to be called if this patch was successfully applied on the server and the client side"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onError")," - Function to be called if this patch failed"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Remove a field from the Group Session"),(0,o.kt)("p",{parentName:"li"},"If the Group Session is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": 100, "b": 123}')," and one calls"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.groupSession.remove("/b");\n')),(0,o.kt)("p",{parentName:"li"},"then after the Group Session is successfully updated the new object is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": 100}'),"."),(0,o.kt)("p",{parentName:"li"},"Since there is a slight chance that the session update was not successful it's a good idea to provide callback functions for both cases. To provide success or fail callback functions you can either specify the onSuccess/onError parameters or use the returned ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use returned Promise to handle success or failure"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.groupSession.remove("/b")\n   .then(() => console.log("Group Session was successfully updated"))\n   .catch(() => console.log("Group Session synchronization failed"));\n')))),(0,o.kt)("h3",{id:"jatosgroupsessionreplace"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.groupSession.replace")),(0,o.kt)("p",null,"JSON Patch replace operation: Replaces a value. Equivalent to a \u201cremove\u201d followed by an \u201cadd\u201d (see ",(0,o.kt)("a",{parentName:"p",href:"http://jsonpatch.com/"},"jsonpatch.com"),")."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} path")," - JSON pointer path"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {object} value")," - value to be replaced with"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onSuccess")," - Function to be called if this patch was successfully applied on the server and the client side"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onError")," - Function to be called if this patch failed"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Replace a field in the Group Session"),(0,o.kt)("p",{parentName:"li"},"If the Group Session is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": 100, "b": 123}')," and one calls"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.groupSession.replace("/b", 789);\n')),(0,o.kt)("p",{parentName:"li"},"then after the Group Session is successfully updated the new object is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": 100, "b": 789}'),"."),(0,o.kt)("p",{parentName:"li"},"Since there is a slight chance that the session update was not successful it's a good idea to provide callback functions for both cases. To provide success or fail callback functions you can either specify the onSuccess/onError parameters or use the returned ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use returned Promise to handle success or failure"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.groupSession.replace("/b", 789)\n   .then(() => console.log("Group Session was successfully updated"))\n   .catch(() => console.log("Group Session synchronization failed"));\n')))),(0,o.kt)("h3",{id:"jatosgroupsessioncopy"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.groupSession.copy")),(0,o.kt)("p",null,"JSON Patch copy operation: Copies a value from one location to another within the JSON document. Both from and path are JSON Pointers (see ",(0,o.kt)("a",{parentName:"p",href:"http://jsonpatch.com/"},"jsonpatch.com"),")."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} from")," - JSON pointer path to the origin"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} path")," - JSON pointer path to the target"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onSuccess")," - Function to be called if this patch was successfully applied on the server and the client side"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onError")," - Function to be called if this patch failed"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Copy a field in the Group Session from one location to another"),(0,o.kt)("p",{parentName:"li"},"If the Group Session is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": "jatos"}')," and one calls"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.groupSession.copy("/a", "/b");\n')),(0,o.kt)("p",{parentName:"li"},"then after the Group Session is successfully updated the new object is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": "jatos", "b": "jatos"}'),"."),(0,o.kt)("p",{parentName:"li"},"Since there is a slight chance that the session update was not successful it's a good idea to provide callback functions for both cases. To provide success or fail callback functions you can either specify the onSuccess/onError parameters or use the returned ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use returned Promise to handle success or failure"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.groupSession.copy("/a", "/b")\n   .then(() => console.log("Group Session was successfully updated"))\n   .catch(() => console.log("Group Session synchronization failed"));\n')))),(0,o.kt)("h3",{id:"jatosgroupsessionmove"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.groupSession.move")),(0,o.kt)("p",null,"JSON Patch move operation: Moves a value from one location to the other. Both from and path are JSON Pointers. (see ",(0,o.kt)("a",{parentName:"p",href:"http://jsonpatch.com/"},"jsonpatch.com"),")."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} from")," - JSON pointer path to the origin"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {string} path")," - JSON pointer path to the target"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onSuccess")," - Function to be called if this patch was successfully applied on the server and the client side"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@param {optional callback} onError")," - Function to be called if this patch failed"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"@return {Promise}"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Move a field in the Group Session from one location to another"),(0,o.kt)("p",{parentName:"li"},"If the Group Session is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"a": "jatos"}')," and one calls"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.groupSession.move("/a", "/b");\n')),(0,o.kt)("p",{parentName:"li"},"then after the Group Session is successfully updated the new object is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"b": "jatos"}'),"."),(0,o.kt)("p",{parentName:"li"},"Since there is a slight chance that the session update was not successful it's a good idea to provide callback functions for both cases. To provide success or fail callback functions you can either specify the onSuccess/onError parameters or use the returned ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use returned Promise to handle success or failure"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'jatos.groupSession.move("/a", "/b")\n   .then(() => console.log("Group Session was successfully updated"))\n   .catch(() => console.log("Group Session synchronization failed"));\n')))),(0,o.kt)("h3",{id:"jatosgroupsessionversioning"},(0,o.kt)("inlineCode",{parentName:"h3"},"jatos.groupSessionVersioning")),(0,o.kt)("p",null,"This flag can be used to turn off versioning of the group session. This speeds up updates to the group session (patches) in certain cases where all concurrent patches are conflict-free between each other. If versioning is turned on (set to true) all session data patches are accompanied by a version. On the JATOS server side only a patch with the current version (as stored in the database) is applied. If there are multiple concurrent patches only the first one is applied. If versioning is turned off all patches arriving at the JATOS server are applied right away without checking the version. This is faster but can lead to unintended session data changes. By default versioning is turned on."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jatos.groupSessionVersioning = false; // Turns off versioning\n")))}m.isMDXComponent=!0}}]);